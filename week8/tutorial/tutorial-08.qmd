---
title: 'ETC5513: Collaborative and Reproducible Practices'
subtitle: "Tutorial 9"
author: "Michael Lydeamore"
date: today
format:
    unilur-html:
        output-file: index.html
        embed-resources: true
    unilur-html+solution:
        output-file: solution.html
        embed-resources: true
---
```{r, echo = FALSE, eval = file.exists("tutorial.css")}
htmltools::includeCSS("tutorial.css")
```


## `r emo::ji("target")` Objectives

* Learn how to use `git` and GitHub when we are dealing with files larger than 100MB

## Git LFS

1. Create a repository in GitHub that has a license, a .gitignore file and a README.md file.

2. Clone the repository to your local machine

3. Take the large zip file from moodle

4. Stage, commit and try to push this file.

5. What do you notice about the error?

6. Reset your previous commit.

4. Add this file **using the `git lfs` workflow**. Remember the quotes, and that your file extension is `.zip`.

::: {.unilur-solution}
```
git lfs install
git lfs track "*.zip"
git add .gitattributes
git add .
git commit -m "Adding large file"
git push origin main
```
:::

5. Push the changes onto GitHub using an extended commit message.

::: {.unilur-solution}
`git commit` (without the `-m` flag) will open a text editor for you to type your extended commit.
:::

Add a git annotated tag to the most recent commit called `v1.0`.

## Collaborating with others

With at least one other person, swap repository details. They do not need to add you as a collaborator at this stage.

Clone their repository to your computer.

Practice the following:

1. Open a pull request with an identified issue with the report. This doesn't have to be a real issue, it's just for practicing our issues and commit messages.
2. Your partner should fix the issue, and close the issue using a commit message.
3. Practice the `git fetch` workflow, to update your local database without moving `HEAD`. Then, move your repository `HEAD` to the latest commit.

