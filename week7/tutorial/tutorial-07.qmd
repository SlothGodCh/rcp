# 🛠️ Tutorial: "Oh no, I lost my work!"  
### Using `git reflog` and `reset` to recover deleted commits

## 🧭 Goal

You’ll simulate a common Git mistake — deleting recent commits — and learn how to recover your work using `git reflog`.

---

## 1️⃣ Create a New Repository on GitHub

1. Go to [https://github.com](https://github.com)
2. Click **+ → New repository**
3. Name it:  
   ```
   git-recovery-tutorial
   ```
4. ✅ Check **"Add a README file"**
5. Click **Create repository**

---

## 2️⃣ Clone the Repo into RStudio

1. In RStudio:  
   **File → New Project → Version Control → Git**

2. Paste the **SSH** or **HTTPS** URL of your GitHub repo

3. Choose a location on your computer

4. Click **Create Project**

✅ You now have a Git-connected RStudio project

---

## 3️⃣ Create and Commit Some Work

### Step 1: Add a file

1. Go to **File → New File → Text File**
2. Type:

   ```
   Line A
   ```

3. Save the file as: `recovery.txt`

4. In the **Git pane**, stage and commit:
   - ✅ Message: `"Add Line A"`

---

### Step 2: Add more commits

1. Add a second line to `recovery.txt`:  
   ```
   Line B
   ```
   Save → stage → commit → `"Add Line B"`

2. Add a third line to the same file:  
   ```
   Line C
   ```
   Save → stage → commit → `"Add Line C"`

---

### Confirm your work

In the **Terminal tab**, run:

```bash
git log --oneline
```

✅ You should see 3 commits, most recent at the top

---

## 4️⃣ The Mistake: Reset Too Far 😱

Let’s simulate a classic Git accident — going back too far:

```bash
git reset --hard HEAD~2
```

- This removes your last two commits
- Open `recovery.txt` — only Line A should remain

---

## 5️⃣ Use `git reflog` to Investigate

Now run:

```bash
git reflog
```

You’ll see a list of recent Git actions, including the reset and your lost commits.

Look for the commit hash that says something like:

```
commit: Add Line C
```

---

## 6️⃣ Recover Your Work

To bring it all back:

```bash
git reset --hard <hash-of-last-good-commit>
```

✅ Your full file should be restored — including Line B and Line C

---

## 🧠 Reflect

- What’s the difference between `git log` and `git reflog`?
- How does Git “remember” things even after a reset?
- Why should you always check `reflog` before panicking?

---

## ✅ Summary

| You want to...                      | Use this             |
|------------------------------------|----------------------|
| Undo a local commit completely     | `git reset --hard`   |
| Recover something you deleted      | `git reflog`         |
| Return to a previous state         | `git reset <hash>`   |

🎉 You’ve just recovered from a Git disaster like a pro!

