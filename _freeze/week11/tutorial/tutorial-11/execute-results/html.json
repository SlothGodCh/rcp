{
  "hash": "fbc7404e7dd2fd1372fda93e008e6dd8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 11\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html:\n        output-file: index.html\n        embed-resources: true\n    unilur-html+solution:\n        output-file: solution.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## ðŸŽ¯ Objectives\n\n* Recap moving through git repositories\n* Practice undoing and resetting commits\n\n## Moving back in time: finding our way in a Git repo\n\n1. How can we explore old commits?\n\n::: {.unilur-solution}\n`git log --oneline`\n:::\n\n2. How are the commits identified?\n\n::: {.unilur-solution}\nThey are identified with a unique SHA or SHA1 number.\n:::\n\n3. Fork the following repo: [https://github.com/github/explore](https://github.com/github/explore). Clone the repo locally.\n   \n4. Using your terminal look at the commits. How can you go up and down over the commits? How can you get out of the list?\n\n::: {.unilur-solution}\nYou can move up and down by pressing `u` or `d`. To exit, press `q`.\n:::\n\n5. List the commits that have been done in the repo since 14 May 2024 only.\n\n::: {.unilur-solution}\n`git log --since=14-05-2024`\n:::\n\n6. Open the local project in RStudio and have a look at the tree history and the commit messages. Specially have a look at longer commits that contain not only one line but also some more text.\n\n7. Where is the repo HEAD?\n\n8. Using the command line interface or terminal move the HEAD of the repository to two commits back from the most recent\n\n::: {.unilur-solution}\n`git checkout e208fa8`\n:::\n\n9. What is the first line of the commit message of this commit?\n\n::: {.unilur-solution}\nMerge pull request 4339 from isasharafdin/todo\n:::\n\n10. Which files have been modified in that commit?   \n\n::: {.unilur-solution}\nJust `topics/todo/index.md`\n:::\n\n11. What is the difference between this commit and the previous commit?\n\n::: {.unilur-solution}\nFirst, `git log e208fa8` to find the SHA of the previous commits. Then, `git diff ff120c2 HEAD`\n\n:::\n\n12. Move the HEAD of the repository back to where was originally located (last commit of the main (or master) branch)\n\n::: {.unilur-solution}\n`git checkout main`\n:::\n\n13. Find the commit with message \"add in lite\" what was change in the modified file?  \n\n::: {.unilur-solution}\n`git log --grep=\"add in lite\"`\n:::\n\n14. Move back to the latest commit in the main (or master) branch of the repo so that you can keep making commits without being in a detached HEAD.\n  \n15. Using your terminal add a new file \"myexample.txt\" in the repo, stage, commit and push the file to **your** remote repo\n\n::: {.unilur-solution}\n![](../images/com2.png){fig-align=\"center\"}\n\n:::\n\n16. Let's add another file same as above now called \"myexample2.txt\". **Stage** the file and then **unstage** the file.\n\n::: {.unilur-solution}\n```\ngit status\ngit add .\n```\n\nTo unstage, `git reset`.\n:::\n\n17. Stage \"myexample2.txt\", commit and push it to the remote repository. \n\n18. You realized that you made a mistake and you want to undo 17. You don't want to remove the commit from the history. How can you do that?\n\n::: {.unilur-solution}\n`git revert SHA`\n:::\n\n19. Run a git log --oneline  and have a look at the commit that you did before the last commit.\n\n20. Pick the commit that you did before the last commit and do git reset SHA. What happens? Why is this not best practice?\n\n::: {.unilur-solution}\n```\ngit status\ngit log\ngit reset SHA\n```\n\nYou will see that the last commit has disappeared from the repo history. This is not considered best practice as it modifies the public record of the repository history.\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}