{
  "hash": "ccce120a04a8ad5b871d6a8ed2834793",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Workshop 5\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html: \n        embed-resources: true\n        output-file: \"index.html\"\n---\n\n::: {.cell}\n\n:::\n\n\n\n# 🧭 Quarto Cross-Referencing and `.gitignore` Workshop\n\nIn this workshop, you’ll learn:\n\n1. How to cross-reference sections, figures, code chunks, and tables in Quarto.\n2. How to use a `.gitignore` file to keep unnecessary files out of your Git repository.\n\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(palmerpenguins)\n```\n:::\n\n\n\n## ✍️ Part 1: Cross-Referencing in Quarto\n\nQuarto lets you easily refer to other parts of your document, like code, figures, and sections — just like in academic papers.\n\nLet’s walk through some examples using the `palmerpenguins` dataset.\n\n---\n\n### 🔗 1. Referencing Sections\n\nAny heading can be cross-referenced by adding an ID to it:\n\n```markdown\n## Data Cleaning {#sec-cleaning}\n```\n\nNow you can refer to it elsewhere like this:\n\n```markdown\nSee Section @sec-cleaning for details on how the data was prepared.\n```\n\n---\n\n\n### 🖼️ 2. Referencing Figures\nTo reference a figure, give it a label and caption:\n\n```{{r}}\n#| label: fig-bill\n#| fig-cap: \"Bill length vs flipper length\"\nggplot(penguins, aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point()\n```\n\nThen reference it:\n\n```markdown\nFigure @fig-bill shows the relationship between flipper length and bill length.\n```\n\n### 📊 4. Referencing Tables\nYou can also label tables:\n\n```{{r}}\n#| label: tbl-summary\n#| tbl-cap: \"Summary statistics of the penguins dataset\"\nknitr::kable(summary(penguins))\n```\n\nThen refer to it like this:\n\n```markdown\nSee Table @tbl-summary for summary statistics of the dataset.\n```\n\n✅ Try It Yourself:\n\n* Create a section, figure, and code chunk using the `penguins` data\n* Give each one a label\n* Add a sentence that references each one\n\n## 🚫 Part 2: Ignoring Files with `.gitignore`\n\nWhen using Git, you often don’t want to track certain files (e.g., temporary files, data, or system files). That’s where `.gitignore` comes in!\n\n---\n\n### 🗂️ 1. What is `.gitignore`?\n\nA `.gitignore` file tells Git **what to ignore** — Git will pretend these files don’t exist.\n\nExample contents of `.gitignore`:\n\n```\n.Rproj.user\n*.html\n*.csv\n.DS_Store\n```\n\nThis would ignore:\n\n- RStudio project files\n- All `.html` and `.csv` files\n- macOS system files\n\n---\n\n### 🛠️ 2. Create and Use `.gitignore`\n\n1. In your project folder, create a file called `.gitignore`\n2. Add the files or patterns you want Git to ignore\n3. Save the file\n4. Add a CSV file to your project folder\n5. Check what Git sees:\n\n```bash\ngit status\n```\n\n✅ If the ignored files aren’t listed, `.gitignore` is working.\n\n---\n\n### ⚠️ Important Note\n\nIf you already added a file to Git *before* putting it in `.gitignore`, Git will still track it.\n\nTo stop tracking it:\n\n```bash\ngit rm --cached filename.csv\n```\n\nThen commit:\n\n```bash\ngit commit -m \"Stop tracking filename.csv\"\n```\n\n---\n\n## ✅ Summary\n\n- Use `.gitignore` to keep your Git repository clean\n- Avoid committing files like datasets, HTML outputs, or IDE settings\n- Helps keep collaboration and version control simple\n\n🎉 Great job — your Git repo is now cleaner and more professional!\n\n---\n\n# 📦 Mini Exercise: Using `git stash`\n\nSometimes you make changes in your working directory, but you're not ready to commit them — and you need to switch branches or pull updates. `git stash` lets you save your changes temporarily without committing.\n\n---\n\n## 🛠️ Goal\n\nLearn how to:\n- Save changes using `git stash`\n- Switch branches safely\n- Reapply your stashed work\n\n---\n\n## 🧪 Step-by-Step Instructions\n\n1. Make sure you're inside a Git-tracked project (any project will do).\n\n2. Open a file and make **some changes** — but **don’t commit** yet.\n\n3. Check your Git status:\n\n```bash\ngit status\n```\n\nYou should see the file listed as modified.\n\n---\n\n### 📦 1. Stash Your Changes\n\nRun:\n\n```bash\ngit stash\n```\n\n✅ This saves your changes and returns your working directory to a clean state.\n\n---\n\n### 🔄 2. Switch Branches (or Pull)\n\nNow try switching to another branch:\n\n```bash\ngit checkout main\n```\n\nOr do a pull:\n\n```bash\ngit pull\n```\n\n✅ Your working directory stays clean — no conflicts!\n\n---\n\n### ♻️ 3. Reapply the Stash\n\nWhen you're ready to bring back your changes:\n\n```bash\ngit stash apply\n```\n\n✅ Your edits will be restored to the files you changed.\n\n---\n\n### 🗑️ 4. (Optional) Clear the Stash\n\nAfter applying, you can remove the stash:\n\n```bash\ngit stash drop\n```\n\nOr, to both apply *and* drop in one step:\n\n```bash\ngit stash pop\n```\n\n---\n\n## ✅ Try It\n\n1. Modify a file  \n2. Run `git stash`  \n3. Switch branches  \n4. Return to your branch and run `git stash apply`  \n5. Confirm your changes are back  \n6. Commit if needed!\n\n---\n\n🎉 You’ve learned how to pause your work safely and come back to it later!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}