{
  "hash": "e51246260f03b94d3ec8838de15c1d01",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 4\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html:\n        output-file: index.html\n        embed-resources: true\n        toc: true\n    unilur-html+solution:\n        output-file: solution.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## üéØ Objectives\n\n* Create repositories and syncrhonize them between your local and remote repos\n* Create a Quarto report with a tabell, figures and sections that are labelled and referenced\n* Create branches in local and remote repositories\n* Deal with merge conflicts\n\n## Creating a new project\n\nLet's practice creating a new project from scratch. We will start by making the remote repository in GitHub.\n\n1. Go to [https://github.com](https://github.com) and log in.\n\n2. Click the **+** icon in the top-right corner ‚Üí choose **\"New repository\"**.\n\n3. Fill out the form:\n   - **Repository name**: e.g., `my-new-project`\n   - (Optional) Add a short **description**\n   - Choose **Public** (or **Private** if preferred)\n   - ‚úÖ Check **\"Add a README file\"**\n\n4. Click the **\"Create repository\"** button at the bottom.\n\n*Your repository is now created and ready to use!*\n\nNow, we need to _clone_ the repository. \n\n## üíª Step 2: Clone the Repository Using the Terminal\n\n1. On your new repository page, click the green **\"Code\"** button.\n\n2. Choose the **SSH** tab (‚ö†Ô∏è *not HTTPS*) and copy the URL.  \n   It will look like this:  \n   ```text\n   git@github.com:your-username/my-new-project.git\n   ```\n\n3. Open your **terminal**.\n\n4. Navigate to the folder where you want to store your project (e.g., `Documents`):\n   ```bash\n   cd ~/Documents\n   ```\n\n5. Use the `git clone` command followed by the URL:\n   ```bash\n   git clone git@github.com:your-username/my-new-project.git\n   ```\n\n6. Move into the project folder:\n   ```bash\n   cd my-new-project\n   ```\n\n````markdown\n## üåø Step 3: Create a Branch, Make Changes, and Push\n\nNow that your repository is cloned, you‚Äôre ready to create a **branch**, make some changes, and push it to GitHub.\n\n---\n\n# Branching\n\n### üîÄ 1. Create a New Branch\n\nIn the terminal, make sure you're inside your project folder:\n\n```bash\ncd my-new-project\n```\n\n::: {.callout-tip}\n\nRemember you can always check where you are by typing\n```bash\npwd\n```\n\n:::\n\n\nCreate and switch to a new branch (you can name it anything ‚Äî here we'll use `feature`):\n\n```bash\ngit branch feature\ngit switch feature\n```\n\n::: {.callout-tip}\nYou can also do this in one command with\n```bash\ngit switch -c feature\n```\n:::\n\n\n‚úÖ You are now working in a new branch called `feature`.\n\n---\n\n### ‚úçÔ∏è 2. Make a Change to a File\n\nOpen the `README.md` file in RStudio.\n\nAdd a new line to the bottom, such as:\n\n```markdown\nThis is a change I made on the feature branch.\n```\n\nSave the file.\n\n---\n\n### üíæ 3. Stage and Commit the Change\n\nCheck which files were changed:\n\n```bash\ngit status\n```\n\nStage the file:\n\n```bash\ngit add README.md\n```\n\nCommit the change:\n\n```bash\ngit commit -m \"Added a line to README on feature branch\"\n```\n\n‚úÖ Your change is now saved locally in your branch.\n\n---\n\n### üöÄ 4. Push the Branch to GitHub\n\nNow push your new branch to the remote (GitHub):\n\n```bash\ngit push -u origin feature\n```\n\n‚úÖ You should now see the `feature` branch appear on GitHub. Go to your repository in the browser and click the \"branches\" dropdown to check!\n\n::: {.callout-tip}\nWe need the `-u` flag on the `push` command to tell `git` to link together the remote (origin) and our local branch. From now on, we can just use `git push` and `git` will remember the link.\n:::\n\n# üîÅ Merge Your Branch Using the Terminal\n\nNow that you‚Äôve made and committed changes on your feature branch, let‚Äôs **merge those changes into the `main` branch** ‚Äî all from the terminal.\n\n---\n\n### üîÑ 1. Switch Back to the `main` Branch\n\nFirst, make sure you‚Äôre back on the `main` branch:\n\n```bash\ngit switch main\n```\n\n---\n\n### üîÉ 2. Pull the Latest Changes from GitHub\n\nBefore merging, make sure your local `main` branch is up to date with the remote:\n\n```bash\ngit pull origin main\n```\n\n---\n\n### üîÄ 3. Merge the Feature Branch into Main\n\nNow merge your feature branch into `main`. For example, if your branch is called `feature`:\n\n```bash\ngit merge feature\n```\n\n‚úÖ This combines the changes from `feature` into `main`.\n\n---\n\n### üöÄ 4. Push the Merged Changes to GitHub\n\nNow push the updated `main` branch to GitHub:\n\n```bash\ngit push origin main\n```\n\n‚úÖ Your main branch on GitHub now includes the changes from your feature branch!\n\n---\n\n### üßπ 5. (Optional) Delete the Feature Branch\n\nYou can now delete the feature branch locally:\n\n```bash\ngit branch -d feature\n```\n\nIf you also want to delete it on GitHub:\n\n```bash\ngit push origin --delete feature\n```\n\n# ‚öîÔ∏è Create and Resolve a Merge Conflict\n\nNow that you know how merging works, let‚Äôs **deliberately cause a merge conflict** and walk through how to fix it.\n\nMerge conflicts happen when two branches change the *same part* of a file in different ways ‚Äî Git doesn't know which version to keep.\n\n---\n\n### üîß 1. Start Fresh in `main`\n\nMake sure you're on the `main` branch:\n\n```bash\ngit switch main\n```\n\nCreate a new branch but do not switch to it:\n\n```bash\ngit branch conflict-branch\n```\n\nOpen the `README.md` file and **change the first line** to:\n\n```markdown\nThis line was edited on main.\n```\n\nSave the file, then stage and commit the change:\n\n```bash\ngit add README.md\ngit commit -m \"Edit first line on main\"\n```\n\n---\n\n### üåø 2. Create a New Branch and Make a Conflicting Change\n\nSwitch to the new branch:\n\n```bash\ngit switch conflict-branch\n```\n\nOpen `README.md` again, but this time change the same first line to:\n\n```markdown\nThis line was edited on conflict-branch.\n```\n\nSave it, then stage and commit:\n\n```bash\ngit add README.md\ngit commit -m \"Edit first line on conflict-branch\"\n```\n\n---\n\n### üîÅ 3. Merge the Branch into `main`\n\nSwitch back to `main`:\n\n```bash\ngit switch main\n```\n\nTry to merge the branch:\n\n```bash\ngit merge conflict-branch\n```\n\nüõë Uh-oh! You‚Äôll see a **merge conflict** message. Git can‚Äôt automatically merge the file.\n\n---\n\n### üß† 4. Resolve the Conflict\n\nOpen `README.md`. You‚Äôll see something like this:\n\n```plaintext\n<<<<<<< HEAD\nThis line was edited on main.\n=======\nThis line was edited on conflict-branch.\n>>>>>>> conflict-branch\n```\n\nThis means:\n- Everything between `<<<<<<< HEAD` and `=======` is from `main`\n- Everything after `=======` is from `conflict-branch`\n\nEdit the file to keep *only one version* ‚Äî or combine them. For example:\n\n```markdown\nThis line includes changes from both branches.\n```\n\nMake sure you delete the conflict markers (`<<<<<<< HEAD`, `=======` and `>>>>>>> conflict-branch`) as part of your changes.\n\nSave the file.\n\n---\n\n### ‚úÖ 5. Finalize the Merge\n\nAfter resolving the conflict:\n\n1. Stage the fixed file:\n\n```bash\ngit add README.md\n```\n\n2. Complete the merge with a commit:\n\n```bash\ngit commit -m \"Resolved merge conflict in README.md\"\n```\n\n3. Push the updated `main` branch to GitHub:\n\n```bash\ngit push origin main\n```\n\nüéâ You‚Äôve resolved a merge conflict like a pro!\n\n\n# Cross-referencing and academic referencing\n\nIn this exercise you will learn how to reference figures, tables and sections in your report. We will also learn how to cite external sources.\n\n1. Open the file `week4.qmd` and add the following to the end of the document:\n\n```{{r}}\n#| label: fig-penguins\n#| fig-cap: \"Bill length vs bill depth of three species of penguins from the Palmer Station, Antarctica\"\n\nlibrary(palmerpenguins)\n\nggplot(penguins, aes(x=bill_length_mm, y=bill_depth_mm, colour=species)) +\n  geom_point()\n```\n\n::: {.cell}\n\n:::\n\n2. Add a sentence below this chunk that says: `@fig-penguins shows that the three species of penguins have clusters of bill depths and bill lengths that largely do not overlap`\n\n3. Render the document. You should see a hyperlink to Figure 1, that links back to your original figure.\n\n# Home extension: Academic referencing\n\nWith Quarto, we no longer need to type out references manually. With the help of some external software, our external references can be automatically generated.\n\n::: {.callout-tip}\nIf you get stuck on this section, check out the video on Moodle.\n:::\n\n\n1. Download Zotero: <https://www.zotero.org/> and register for a free account.\n2. Install the Better BibTeX for Zotero extension: <https://retorque.re/zotero-better-bibtex/installation/>\n3. Install the relevant Connector for your web browser: <https://www.zotero.org/download/connectors>\n4. We will add the reference by it's _Digial Object Identifier_ or DOI. The DOI for `palmerpenguins` is 10.5281/zenodo.3960218. Press the small \"Add item by identifier\" button in Zotero, and paste in the DOI:\n\n![](../images/add_object.png){fig-align=\"center\"}\n\n5. In Zotero, right click the newly added item, go to \"Better BibTex\" -> \"copy BibTeX to clipboard\"\n\n![](../images/copy-bibtex.png){fig-align=\"center\"}\n\n\n6. Inside your project, create a new file called `references.bib`. Paste the BibTeX you just copied in there. It should look something like this:\n\n```\n@misc{horstAllisonhorstPalmerpenguinsV0102020,\n  title = {Allisonhorst/Palmerpenguins: V0.1.0},\n  shorttitle = {Allisonhorst/Palmerpenguins},\n  author = {Horst, Allison M and Hill, Alison Presmanes and Gorman, Kristen B},\n  year = {2020},\n  month = jul,\n  doi = {10.5281/ZENODO.3960218},\n  urldate = {2025-03-24},\n  abstract = {CRAN release of palmerpenguins v0.1.0 R package by Horst, Hill and Gorman (July 2020).},\n  copyright = {Open Access},\n  howpublished = {Zenodo}\n}\n```\n\n7. In `week4.qmd`, add the following to the YAML:\n\n```\nbibliography: references.bib\n```\n\n8. In the sentence we wrote describing Figure 1, add the following to the end of the sentence: `@horstAllisonhorstPalmerpenguinsV0102020`.\n\n9. Re-render the document. You should have a reference to the package where you typed `@horstAllisonhorstPalmerpenguinsV0102020`, and you should see a references section at the end of the document.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}