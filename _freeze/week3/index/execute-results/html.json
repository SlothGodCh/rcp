{
  "hash": "c6af1a0d2b56af9657089934edf7756c",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Introduction to version control systems: git and GitHub\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 2\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 3\"\nformat: \n  revealjs:\n    logo: ../common_images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"../common_images/bg-01.png\"}\n\n### Introduction to version control systems: git and GitHub\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 2\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n1. Reproducible reporting\n2. Quarto documents\n3. R Code chunk options\n4. Including images and figures\n5. Computer file architechture\n6. R projects\n7. Good coding practices\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n* Motivation for version control\n* Git\n* Introduction to the command line interface\n* GitHub\n* Connecting git and GitHub with our computer using the command line interface\n* Integration between GitHub and RStudio\n* Workflow for using version control\n* Assignment 1\n:::\n\n\n## Project life: Different versions\n\n![](images/scott-webb-YBwPrBiccX4-unsplash.jpg){fig-align=\"center\"}\n\n`file1.qmd` -> `file2.qmd` -> ... -> `file25.qmd`\n\n::: {.fragment}\n#### What are the issues with this approach? {.center}\n:::\n\n\n## What are the issues with this approach?\n\n* Complicated to remember what changes you made in `file20.qmd`\n* Cumbersome to compare differences between file versions\n* Taking turns to collaborate on the same project and same files\n* Very hard to merge file between collaborators\n\n#### [Solution: Use version control!]{.monash-green2 .center}\n\n## What is a version control system?\n\n::: {.callout-tip}\n## Definition: Version Control System\n\nVersion control is a system that records changes to a file or set of files over time so that you can recall specific versions later. [Git manual](https://git-scm.com/book/en/v2)\n:::\n\n## Version control\n\nVersion control systems are a category of software tools that help store and manage changes to source code (projects) over time. They can:\n\n* track of every modification to the source code in a special kind of database,\n* allow you to roll back to previous versions if a mistake is made, and compare the code to fix the problem while minimizing disruption,\n* manage multiple versions of a project easily\n\n\nIt is a very useful (actually essential!) tool for collaborating and for sharing open source resources.\n\n## Different Version control Systems\n\n[**Local version control systems**]{.monash-green2}\n\n::: {.columns}\n::: {.column width='50%'}\nRevision control System (RCS) --> keeps differences between files (time)\n\n![](images/local.png){fig-align=\"center\" width=\"65%\"}\n\n[Figure source & more info](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)\n:::\n::: {.column width='50%' .smaller}\n- Copy files into another directory\n- Name files with time stamp\n- Very hard to collaborate with others\n- All versions under the same hardware \n\n::: {.fragment}\n- Highly prone to error \n- Difficult to collaborate.\n:::\n\n:::\n:::\n\n## Different Version control Systems\n\n[**Centralized version control systems (CVS)**]{.monash-green2} are now the standard for version control\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/centralized.png){fig-align=\"center\"}\n\n[Figure source & more info](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)\n:::\n::: {.column width='50%'}\n- Have a [single server]{.monash-green2} that contains all the versioned files \n- A number of clients that check out files from that central place.\n- Easier to collaborate\n\n::: {.fragment}\n- Server issues\n- Entire history of the project in a single place: You risk losing everything\n:::\n:::\n:::\n\n## Different Version control Systems\n\n[**Distributed version control systems**]{.monash-green2}\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/distributed.png){fig-align=\"center\"  width=\"70%\"}\n\n[Figure source & more info](https://git-scm.com/book/en/v2/Getting-Started-About-Version-Control)\n:::\n::: {.column width='50%'}\n* The repository is [fully mirrored]{.monash-green2}, including it's full history in various servers and/or lcoations\n* If any server malfunctions, the repositories can be restored from any of the other servers\n* Every clone is (theoretically) a full backup of all the data\n:::\n:::\n\n\n## Distributed Version Control: Git\n\n[**We are going to use a distributed version control called Git**]{.monash-green2}\n\n![](images/Git-Logo-Black.png){fig-align=\"center\" width=\"80%\"}\n\n## Git history\n\nGit was created by Linus Torvalds in 2005 for development of the Linux kernel and since then many other kernel developers\nhave been contributing to its development. The maintainer since 2005 is Junio Hamano. \n\nAs with most other distributed version-control systems, and unlike most clientâ€“server systems, every Git directory on every computer is a full-fledged repository with complete history and full version-tracking abilities, independent of network access or a central server.\n\n[Git is free and open-source software distributed under the terms of the GNU General Public License version 2.](https://en.Wikipedia.org/wiki/Git)\n\nMore info [here](https://git-scm.com)\n\n## Git for us \n\n- A system for controlling our project versions\n- A disaster recovery system\n- A synchronization service\n- A platform for disseminating our work\n- A tool for collaboration\n- ...\n\n[More on Git here](https://git-scm.com/book/en/v2)\n\n## Git overview in a nutshell\nLet's think of the connections between the different versions of an R project as a tree (Git tree).\n\n::: {.columns}\n::: {.column width='50%'}\n- Git tree example\n- White circles represent each version of the project\n- We have what we call [master/main]{.monash-green2} (default branch)\n- We have branches that appeared and then [merged]{.monash-green2} with the master\n:::\n::: {.column width='50%'}\n![](images/git_tree1.jpg){fig-align=\"center\"}\n:::\n:::\n\n## We need to learn\n\n- How Git operates --> shell/command line\n- How to connect our R projects to a Git repo\n- How to connect our local Git repo to a Git Cloud repository (GitHub).\n\n## Command Line Interface (cli)\n\n* In most cases (non-linux users) use a Graphical User Interface (GUI) to interact with their programs and operating systems\n* However, at the beginning of the computing times most people would use the command line interface to interact with their computer\n\n![](images/shell.png){fig-align=\"center\"}\n\n## Git and Command Line  \n\n#### We will learn how to use the shell/command line interface {.center}\n\n**Why?**\n\n* We will use the command line interface to interact with Git and with Github\n- The shell or command line interface is an interface where the user types  commands\n- This interface allow us to control our computer using commands entered via our keyboard\n- That means that instead of using a graphical user interface (GUI) + our mouse to open and close programs, create folders and moving files, we are going to type commands\n\n## Command Line Interface \nAlso known as the Shell, command line interface (cli) or terminal is an interface for [typing]{.monash-green2} commands to interact directly with a computer's operating system.\n\n![](images/shell.png){fig-align=\"center\"}\n\n#### Examples of things that we can do from the shell or terminal:\n- Navigating through folders and files\n- Create/delete folders\n- Run and install programs (i.e interact with Git)\n- And much more!\n\n## Terminal in action\n\nTypically when you open your terminal, it will welcome you with a\nprompt that looks like this:\n\n\n```\npatricia@computerid-macbook:~$\n```\n\nor with the new Catalina Mac OX\n\n``` \npatricia@computerid ~ % \n```\n\nOn Windows it will contain the same elements but look like this:\n```\npatricia@computerid-pc MINGW64 ~$\n```\n\n![](images/shell.png){fig-align=\"center\" width=\"40%\"}\n\n\n## Terminal in practice\n\nWe will start writing commands after `~$` or `~%` depending on the terminal version that you are using\n\n![](images/shell.png){fig-align=\"center\" width=\"40%\"}\n\nThe commands that we are going to use are the same regardless the terminal version you have.\n\n\n# Let's start learning the commands to navigate our computer and to interact with Git via the command line interface\n\n![](\"images/mael-balland-V5hAryReZzo-unsplash.jpg\"){fig-align=\"center\" width=\"80%\"}\n\n## What is the path to my current computer location?\n\n[`pwd`]{.monash-green2}: print working directory or present working directory\n\n``` \nmichael@computerid ~ % pwd\n/Users/michael/Documents/ETC5513\n```\n\n#### Understanding the output of `pwd` command:\n\n```\n/Users/michael/Documents/ETC5513\n```\n- `/` represents the root directory\n- `Users` is the  Users directory\n- `michael` refers to my directory or folder within the users directory\n- ...\n\n## What is in my directory?\n\n[`ls`]{.monash-green2} lists the files inside the current directory\n\n``` \nmichael@computerid Documents~ % ls Documents\n```\n``` \nCourses Research Teaching file.pdf example.txt\n```\n\n- `Documents` is an argument to the `ls` command. \n- `ls` gives you a list of all the elements in a directory\n- `ls -a` list of *all* the files including hidden ones\n\nEach Linux command (`pwd`,`ls` ...) have lots of options ([flags]{.monash-green2}) that can be added.  \n\n[A reference list of unix commands with options might be found here](https://explainshell.com)\n\n\n## Command Line Basics: Navigating between directories\n\n[`cd`]{.monash-green2}: Change directory\n\n- First we need to make sure where we are (`pwd`).\n- The `cd` command syntax is very simple, we just need to specify the directory that we want to navigate to\n- At any moment of your navigation, you can use the `pwd` command to confirm your current location\n- [A path that starts with `/`]{.monash-green2} is assumed to be absolute. \n\n## `cd` in practice! {.smaller}\n\n### My current location is [`Documents`]{.monash-green2}. I want to get to `Documents/Research/COVID`\n\n- `cd Research` means that we move into `Research`\n- `cd COVID` means that we move into `COVID`\n- `.`  means the current directory `COVID`\n- `cd ..`  means (parent directory) that we move back into `Documents`\n- The `~` symbol is a shorthand for the userâ€™s home directory and we can use it to form paths:\n   - If you are in your `Downloads` directory (`/Users/John/Downloads`) typing `cd ~` will bring you to your Home directory `/Users/John`!\n\n## More commands practice!\n\n### My current location is `COVID`, or really `Documents/Research/COVID`\n\n- `..` is shorthand for the parent of the current working directory\n- `cd ..` means that we move into `Research` (1 directory up). That is from `COVID` back to `Research`\n- `cd ../../` means that we move up two directories: from `COVID` to `Documents`\n- `mkdir Project1 Project2` means \"make two new directories (folders) called Project1 and Project2\".\n\n## More commands practice!\n\n- `mv` move files or folders: takes two arguments, the first being files or folders to move and the second being the path to move to.\n- `cp` this command is used to copy files or group of files or directories. When copy files we need to use `cp -r` to copy all the directory contents.\n- `rm` remove files and folders\n- To remove entire folders `rm` requires the `-r` (recursive) flag\n- We can create empty files with `touch example.qmd`\n\n## Cheat sheet for command line \n\nExcellent summary about the commands that we will be using can be found [here](https://ubuntu.com/tutorials/command-line-for-beginners#1-overview). \n\nPlease read and practice 1-5 sections once you have installed your command line interface/terminal/Git Bash Shell \n\n- See next slides for instructions about how to install your command line interface/terminal/Git Bash Shell.\n\n#### You don't need to learn all linux commands only those that we are going to use! {.center}\n\n# Let's get some practice using the terminal\n\n## Installing the command line interface and Git\n\n## Git for Windows\n\n- Please follow the tutorial [here](https://phoenixnap.com/kb/how-to-install-git-windows). This tutorial teach you step by step how to install Git and the command line interface in your Windows system. \n- If you following the steps above you will get Git install in your computer as well as Git Bash Shell which is the terminal that you will be using if you are a Windows user.\n\n## Git for Mac\n- Go to Applications folder, open Utilities, double-click on Terminal\n- Or open a Finder Window and search for \"Terminal\"\n\n**Once you have found the terminal**:\n\nOpen your Terminal and check if you have Git installed:\n\n- By typing in your terminal `git version` \n- If Git is installed you will see something like  \n`git version 2.20.1 (Apple Git-117)`\n\n## Git for Mac\n\nIf Git is not installed in your Mac:\n\n- Type in your terminal `brew install git`\n- Alternatively you can install Git from [here](https://git-scm.com/download/mac)\n\n\n## Git for Linux\n- Check if you have Git installed: Type `git version`  in your terminal.\n- If Git is installed you will see something like: `git version 2.20.1`\n\nIf Git is not installed:\n\n- Type in your terminal: `sudo apt-get install git`\n\n## Prior to the tutorial:\n\n- For **Windows** users please install Git and the command line interface (Git Bash Shell) following the installation instructions.\n- For **Mac and Linux** users please make sure you have Git installed and you know where to find your terminal (Mac users --> Applications > Utilities > Terminal), and if not installed, please follow the instructions to install it. \n \n#### If you have any problems with the installation please make use of the consultation hours to get some help {.center}\n\n\nAlso remember that in Moodle you have the **Forum for discussion** where you can talk to each other, share tricks and resources. Please make use of it!\n  \n## Git recap\n\n* Tracking all the changes to a project\n* Allows you to go back and forth between versions\n* Check files history\n* Tag specific versions for quick referencing\n* Review changes made by collaborators in the project\n* Create project branches that allow you to work on the project without interfering with the master project\n* Merging branches to master project\n\nTo interact between our projects and Git, we are going to use the shell/command line interface\n\n# How does Git connect with our reproducible projects?!\n![](https://media.giphy.com/media/eTVG7eVNnud8Y/giphy.gif){fig-align=\"center\"}\n\n## How does Git work?\nWe have learned that Git is a distributed version control system. \n\n#### But how does it actually work? {.center}\n\n* Git works with snapshots of miniature files systems not with differences\n* Every time you save files in your project, Git  takes a picture of what all your files look like at that moment and stores a reference to that snapshot. \n* If files have not changed, Git does not store the file again.\n* If a file has no change, Git stores a link to the previous identical file that it has already stored in the repository history.\n\n## Snapshots (Database)\n\n![](images/gitsnapshots.png){fig-align=\"center\"}\n\n::: {.aside}\nIllustration source [Begining Git and Github](https://git-scm.com/)\n:::\n\n## Git tree and Snapshots (Database)\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/git_tree1.jpg){fig-align=\"center\"}\n:::\n::: {.column width='50%'}\n![](images/gitsnapshots.png){fig-align=\"center\"}\n\nEach version corresponds to one of the dots on the git tree.\n:::\n:::\n\n## Files in a Git repository\n\nThe states in a Git repository are: the working directory, the staging area (index) and the \ngit directory:\n\n* The `working directory` is the current snapshot that you are working on.\n* The `staging area` (index) is where modified files are marked in their current \nversion ready to be stored in the database (i.e. the index of changes).\n* The `git directory` is the database where the history is stored\n\nIn your file system you will see the folder and the files of your project\n\nMore info: [Begining Git and Github](https://git-scm.com/)\n\n## Components of a Git repository: Visually\n\n![](images/threeSS.jpg){fig-align=\"center\"}\n\n## Three Git States\n\nGit has **three main states** that your files can reside in: modified, staged, and committed:\n\n* **Modified**: you have changed the file but have not committed it to your repository database yet.\n* **Staged**: you have marked a modified file in its current version to go into your next commit snapshot.\n* **Committed**: the data is safely stored in your local database.\n\nThis leads us to the three main sections of a Git project: the working tree, the staging area, and the Git directory.\n\n[These actions occur in your local repository and allow you to create your Git tree!]{.monash-green2}\n\n## Three Git States Visually \n\n![](images/stages_example.png){fig-align=\"center\"}\n\n::: {.aside}\n[Figure source](https://git-scm.com/book/en/v2)\n:::\n\n## Local Git repo and remote Git repository\n\n![](images/completeGDE.jpg){fig-align=\"center\"}\n\n## GitHub is our remote repository\n\n![](images/Gitvs.Github-1a.jpg){fig-align=\"center\"}\n\n* GitHub is an interface and cloud hosting service built on top of the Git version control system.\n* Git does the version control and Github stores the data remotely.\n* GitHub makes your projects accessible on a fully feature project website\n\n[More info about Github here](https://github.com/features)\n\n## Sign up for a GitHub free account\n\n[Here you can sign up for a free GitHub account](https://github.com/join?source=header-home).\nPlease use your Monash email address to create it **before the tutorial this week**.\n\nIf you already have a GitHub account and want to keep them all together, you can add another email to your current account.\n\n![](images/sign_github.png){fig-align=\"center\"}\n\n## Git repo and a remote repository\n\n![](images/completeGDE.jpg){fig-align=\"center\"}\n\n## GitHub is our remote repository\n\n![](images/github_repo.png){fig-align=\"center\"}\n\n## Collaborative \n\n![](images/sharing.jpg){fig-align=\"center\"}\n\n## From GitHub <--> to our computer\n\n- Create a repository ([repo]{.monash-green2}) on https://www.github.com\n- **Clone** this GitHub repository into our computer: making a \"local copy\"\n- Work on our local copy of the repo\n- **Stage and Commit** changes to local repository\n- **Push** those changes into the remote repo in GitHub.\n- **Pull** changes from the remote repo to our local repository.\n\nOur goal is to have both our local and remote repositories synchronized\n\nLet's look at all these in more detail!\n\n## Creating a repo on GitHub\n\n::: {.columns}\n::: {.column width='50%'}\n1. Login into GitHub\n2. Click the â€˜+â€™ icon on the top right on the menu bar and select â€˜New Repositoryâ€™.\n:::\n::: {.column width='50%'}\n![](images/newrepo1.png){fig-align=\"center\"}\n:::\n:::\n\n## Creating a repo on GitHub\n\n**Important:**\n\n- Repo name\n- Visibility: public or private\n- Make sure it is initialized with `README.md`: It is important to have a `README.md` file for every repository. GitHub will use this file as the \"presentation\" of the repository and should briefly describe what the repo is about.\n\n## Creating a repo on GitHub\n\n![](images/creatingrepo.png){fig-align=\"center\"}\n\n## Configuring Git in your Rstudio using the terminal\n\nFirst open your command line interface/Terminal/Git Bash Shell:\n\n![](images/setgit2.png){fig-align=\"center\"}\n\n## Configuring Git in your Rstudio  project {.smaller}\n\nFirst of all we need to get your Git configured in Rstudio (the same follows for your own computer):\n\nOpen your command line interface/Terminal/Git Bash Shell and type:\n\n- `git config --global user.email \"your.email@example.com\"`\n- `git config --global user.name  \"Your_Firstname Lastname\"`\n\nMake sure you use the same email address for this and for setting up your GitHub account.\n\nTo check that everything is set up correctly, **type the following in the CLI**:\n\n`git config --global user.email` and `git config --global user.email`\n   \n\n## Configuring Git in your Rstudio Cloud project using the R console\n\n\nAlternatively you could type the following in your R console inside Rstudio: \n\n\n```{{r}}\ninstall.packages(usethis)\n\nlibrary(usethis)\n\nusethis::use_git_config(user.name = \"Your Name Surname\",\n                        user.email = \"Your monash email\")\n```\n\n\n<!-- --- -->\n<!-- # Configuring Github II -->\n<!-- ## Setting up the SSH key -->\n<!-- * Using the SSH protocol, you can connect and authenticate to remote servers -->\n<!-- and services. With SSH keys, you can connect to GitHub without supplying -->\n<!-- your username or password at each visit. -->\n\n<!-- *When you set up SSH, you'll generate an SSH key and add it to the ssh-agent and then add the key to your GitHub account. Adding the SSH key to the ssh-agent ensures that your SSH key has an extra layer of security through the use of a passphrase -->\n\n\n<!-- Ref: https://help.github.com/en/github/authenticating-to-github/about-ssh -->\n\n## Getting a remote repository\n\n![](images/gitclone.jpg){fig-align=\"center\"}\n\n* Grabs remote repository from a server/cloud (i.e github)\n* Creates a new folder (copy of the remote repository) in our computer\n\n## Cloning a github repo\n\nWhen you create a repository on GitHub, it exists as a remote repository.\n\nUsers can clone your repository to create a local copy on their own computer \nand sync between the two locations.\n\n![](images/sharing.jpg){fig-align=\"center\"}\n\nMore detailed info [here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository)\n\n## Adding an SHH key into your GitHub\n\nIn the tutorial you will learn how to add an SSH key into your workflow:\n\n- When working with a Git repository you will be required to identify yourself to GitHub using your username and password *each time to do a commit!*. \n- An SSH key is an alternative way to identify yourself that _does not require you to enter you username and password every time_\n- **SSH keys come in pairs**, a [public key]{.monash-green2} that gets shared with services like GitHub, and a [private key]{.monash-green2} that is stored only on your computer or in your Rstudio Cloud project. \n- If the keys match, you're granted access!\n\nMore info [here](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account) and [here](https://help.github.com/en/github/authenticating-to-github/about-ssh)\n\n\n## From Github into our computer\n\n![](images/github_repo.png){fig-align=\"center\"}\n\nFrom our shell or command line:\n1. Navigate to the computer location where we want to download the github repo\n2. `git clone git@github.com:okayama1/Git_demo.git`\n3. This will create a folder in your computer with the github repository files and folders\n\n## Git Workflow\n\n![](images/completeGDE.jpg){fig-align=\"center\"}\n\nExample: \n\n1. We modified a qmd file from the working directory\n2. We add the modified files to the staging area to be stored: `git add`\n3. We move the files from the staging area into the git directory (`git commit`) capturing a snapshot\n4. We connect with the remote repository `git push` and update files\n\n\n## Tracked and untracked files {.smaller}\n\n* In a git repository tracked files are those which are part of the git repository\n* However, we can also have untracked files for which their history is not tracked\n\n- Tracked files are files that were in the last snapshot; they can be unmodified, modified, or staged. In short, tracked files are files that Git knows about. \n- Untracked files are everything else â€” any files in your working directory that were not in your last snapshot and are not in your staging area.\n\nWe will learn more about this in the coming weeks.\n\n\nBut if you want some early reading, have a look [here](https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository)\n\n## Recap: From clone to first commit {.smaller}\n\n* `git clone \"remote repo address\"` is a Git command line utility which is used to target an existing repository and create a clone, or copy of the target repository in your local computer. \n* `git add filename` is a Git command that adds a change in the working directory to the staging area. \n* `git commit -m \"Message\"`: The Git commit command captures a snapshot of the project's currently staged changes. (m = message for commit. The git commit is used to create a snapshot of the staged changes along a timeline of a Git projects history.)\n* `git push origin master (or main)`: The git push command is used to upload local repository content to a remote repository, in this case to the master (or main) branch.\n  \n## GitHub Workflow: Visual example\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/gitclone.jpg){fig-align=\"center\"}\n\nClone pulls from the GitHub repo\n:::\n::: {.column width='50%'}\n![](images/commit_push.jpg){fig-align=\"center\"}\n\nWorking in your computer and updating the remote repo in GitHub\n:::\n:::\n\n## General Workflow (via Terminal) {.smaller}\n\nYou typically clone a repo only once. After that each time you work on your repo you will use the following Git commands: \n\n-  `git pull origin \"branch name\"`  is used to fetch and download content from a remote repository (after the repo has been cloned) and immediately update the local repository to match that content.\n-  `git status` displays the state of the working directory and the staging area\n-  `git add file_name` adds changes in the working directory to the staging area\n-  `git commit -m \"Message\"` is used to create a snapshot of the staged changes along a timeline of a Git project history\n-  `git push origin \"branch name\"` command is used to upload the local repository content to a remote repository in GitHub\n  \n  \n# Cheat sheet on how to use the terminal for Git\n\nExcellent summary about the commands that will be using can be found [here](https://education.github.com/git-cheat-sheet-education.pdf)\n\n## Commit messages\n\nWe can write our commit messages like this:\n\n`git commit -m \"Message\"`\n\nAlternatively, we can also use an external editor. This is useful when we want to create extended commits and if we forget to use `git commit -m` and we type `git commit`\n\n- Our external editor of choice is VSCode.\n\n![](images/vscode1.png){fig-align=\"center\"}\n\n## Installing VS code\n\nInstall VSCode [here](https://code.visualstudio.com/download).\n\nThen set VSCode as follows:\n\n![](images/vscode.png){fig-align=\"center\"}\n\n[Source here.](https://salferrarello.com/git-commit-message-editor/)\n\n## After installing VSCode {.smaller}\n\nWe need to set VS code as the editor for Git by typing the following in the command line interface/Terminal/Git Bash Shell:\n\n`git config --global core.editor \"code --wait\"`\n\nYou can check if this has worked by committing without using `-m` by just typing in your cli `git commit`.\n\nThen the VS Code editor will open and you can write your commit directly there.\n\n![](images/vscodecommit.png){fig-align=\"center\"}\n\nIf you are a Windows user and this does not work for you, you might need to set up your VSCode path manually.\n\n## Git Learning Process \n\nFirst of all, learn to manage your own projects on GitHub: get familiar with **committing**, **pushing** and **pulling**.\n\n* Create repos on GitHub first\n* Always initialize repos with README\n* Clone the repo to your local directory and start adding files and folders!\n* Data (will go into the data folder)\n  - For larger files, data can be stored in\n  [Googledrive](https://github.com/tidyverse/googledrive)\n  - we will also learn how to store large files in GitHub\n* Commit/Push often.\n* Sync across all your workstations.\n\n\n## Rstudio  and GitHub\n\n\n#### The status/staging panel in Rstudio {.center}\n\n![](images/staggingarea1.png){fig-align=\"center\"}\n\n## Rstudio  and GitHub\n\nRStudio keeps git constantly scanning the project directory to find any files\nthat have changed or which are new.\n\n* By clicking a file's little \"check-box\" you can stage it.\n\n![](images/staggingarea1.png){fig-align=\"center\"}\n\n\n## Understanding the symbols in the Rstudio Git panel\n\n- [**Blue-M**]{style=\"color:blue\"}: a file that is already under version control that has been modified.\n- [**Orange-?**]{style=\"color:orange\"}: a file that is not under version control (yet...)\n- [**Green-A**]{style=\"color:green\"}: a file that was not under version control, but which has been staged to be committed.\n- [**Red-D**]{style=\"color:red\"}: a file under version control has been deleted.  To make it really disappear, you have to stage its disappearance and commit.\n- [**Purple-R**]{style=\"color:purple\"}: a file that was renamed.  (Note that git in Rstudio seems to be figuring this out on its own.)\n\n## Configuration\n\nThe **Diff** window shows what has changed between the last committed version of a file and its current state.\n\n::: {.aside}\nNote: all this output is available from the command line too, but the Rstudio interface is very nice!\n:::\n\n![](images/diff.png){fig-align=\"center\" width=\"70%\"}\n\n## Making a Commit\n \nSuper easy:\n- After staging the files you want to commit...\n- Write a brief message (first line short, then as much after that as you want) and hit the commit button.\n\n![](images/commit.png){fig-align=\"center\"}\n\n## The History window\n   \nAllow us to understand past commits.\n\n- Easy inspection past commits.\n- See what changes were made at each commit.\n\n![](images/history.png){fig-align=\"center\"}\n\n## Important:\n\n- We can interact between Git, GitHub and our local repository using the terminal only\n- We can interact between Git, GitHub and our local repository using Rstudio \n\nIn this unit you must learn how to use Git via the command line interface/Terminal/Git Bash shell as that is the universal way of using git and it will be very useful for using with any programming language.\n\n## To do before the tutorial\n\n- Create a GitHub account\n- Install Git and the command line interface in your computers (please see info on previous slides)\n- Make sure you read again all this material\n- Please watch the tutorial video before before the tutorial\n- Complete the online quiz\n\n## Week 3 Lesson\n\n::: {.callout-important}\n## Summary\n* Motivation for version control\n* Git \n* Introduction to command line\n* Github\n* Integration between Github and Rstudio\n* Workflow for using version control\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}