{
  "hash": "1c9556b8d0b05fb08b65d9a971ad475e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Git and GitHub Workshop\"\nauthor: \"Workshop Team\"\ndate: \"2025-04-15\"\nformat: html\neditor: visual\n---\n\n\n\n\n\n# **Git and GitHub Workshop**\n**Audience:** First-year Master’s students (new to coding and version control)  \n**Objective:** By the end of these instructions, you will be able to:  \n✅ Create a GitHub repository  \n✅ Clone it to your computer  \n✅ Make changes, commit them, and push updates to GitHub  \n\n---\n\n## **📌 Why Use Git and GitHub?**  \nGit is a tool that helps you track changes in your code over time. GitHub is a platform that stores your code online and allows you to share it with others.\n\nWith Git and GitHub, you can:  \n\n- Keep a history of your changes  \n- Work on projects from different computers  \n- Collaborate with others easily  \n\n---\n\n## **🛠️ Setup Requirements**  \n### ✅ Install Git on your computer:  \n- **MacOS:** Open Terminal and install Git using Homebrew:\n```bash\nbrew install git\n```\n\n- **Windows:** Download and install Git from [https://git-scm.com](https://git-scm.com).  \n\n- **Linux:** Install Git using your package manager:\n```bash\nsudo apt install git\n```\n\n### ✅ Create a GitHub account:  \n- Go to [https://github.com](https://github.com) and sign up.  \n\n---\n\n## **1. Create a Repository on GitHub**  \n1. Open [https://github.com](https://github.com) and log in.  \n2. In the top-right corner, click the **+** icon → **New Repository**.  \n3. Fill out the repository details:  \n   - **Repository name**: `my-first-repo`  \n   - **Description**: (Optional)  \n   - Set it to **Public** (or **Private** if preferred)  \n   - Check **Add a README file**  \n4. Click **Create repository**  \n\n✅ *You’ve created your first repository!*  \n\n---\n\n## **2. Clone the Repository to Your Computer**  \n1. Open your repository on GitHub.  \n2. Click the green **Code** button → Select **SSH** → Copy the SSH URL.  \n3. Open a terminal (Command Prompt, Git Bash, or similar).  \n4. Navigate to a directory where you want to store your project:\n```bash\ncd ~/Documents\n```\n5. Clone the repository:\n```bash\ngit clone git@github.com:your-username/my-first-repo.git\n```\n6. Change into the repository folder:\n```bash\ncd my-first-repo\n```\n\n✅ *You’ve now downloaded a local copy of your repository.*  \n\n---\n\n## **3. Make Changes to a File**  \n1. Open the repository folder in a text editor (like VS Code).  \n2. Open the `README.md` file.  \n3. Add a line of text:\n```markdown\nThis is my first repository for my coding project.\n```\n4. Save the file.  \n\n✅ *You’ve made your first change!*  \n\n---\n\n## **4. Stage, Commit, and Push Changes**  \nNow you need to tell Git to track and save these changes.\n\n### **👉 Step 1: Check the Status**  \nIn the terminal, check which files have changed:\n```bash\ngit status\n```\nYou should see the `README.md` file listed as modified.  \n\n---\n\n### **👉 Step 2: Stage the Changes**  \nStage the file so Git knows to track it:\n```bash\ngit add README.md\n```\n\n---\n\n### **👉 Step 3: Commit the Changes**  \nCreate a snapshot of the changes and add a descriptive message:\n```bash\ngit commit -m \"Added personal message to README\"\n```\n\n---\n\n### **👉 Step 4: Push the Changes**  \nSend the changes to GitHub:\n```bash\ngit push\n```\n\n✅ *Check your repository on GitHub → Refresh the page → Your new content should be visible!*  \n\n---\n\n## **5. Make More Changes (Optional)**  \n1. Open the `README.md` file again.  \n2. Add another line of text:\n```markdown\nHere’s a second change to my repository.\n```\n3. Save the file.  \n\n### **👉 Repeat the Git Workflow**  \n1. Check status:\n```bash\ngit status\n```\n2. Stage the change:\n```bash\ngit add README.md\n```\n3. Commit the change:\n```bash\ngit commit -m \"Added second line to README\"\n```\n4. Push the change to GitHub:\n```bash\ngit push\n```\n\n✅ *Refresh your GitHub repository to confirm the update.*  \n\n---\n\n## **6. How to Check the History**  \nTo see a history of your commits, type:\n```bash\ngit log\n```\n- Press `q` to exit the log view.  \n\n---\n\n## **7. Troubleshooting Tips**  \n💡 **Permission denied when cloning?**  \n- Make sure your SSH key is set up correctly. Follow GitHub’s guide on setting up SSH keys [here](https://docs.github.com/en/authentication/connecting-to-github-with-ssh).  \n\n💡 **Git asks for your username and password?**  \n- You might not be using SSH. Double-check that you copied the SSH URL, not the HTTPS one.  \n\n💡 **Changes aren’t showing on GitHub?**  \n- Make sure you’ve pushed your changes:\n```bash\ngit push\n```  \n\n---\n\n## **✅ Workflow Summary**  \n1. **Make changes** – Edit your files.  \n2. **Stage changes** – `git add <filename>`  \n3. **Commit changes** – `git commit -m \"Message\"`  \n4. **Push changes** – `git push`  \n\n---\n\n## **🎯 What Success Looks Like**  \n✅ A GitHub repository created.  \n✅ Files cloned to your local machine.  \n✅ Successfully edited, committed, and pushed changes to GitHub.  \n\n---\n\n## **🚀 Next Steps**  \n- Try adding more files and making more commits.  \n- Explore creating a branch and making a pull request.  \n- Experiment with resolving conflicts and merging branches.  \n\n---\n\n## **👏 Well Done!**  \nYou’ve completed the Git and GitHub workshop. Version control will now make your coding projects more organized and stress-free!  \n\n---\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}