{
  "hash": "dc36412673853789eacce7671d19fd90",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 2\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html:\n        output-file: index.html\n        embed-resources: true\n    unilur-html+solution:\n        output-file: solution.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## ðŸŽ¯ Objectives\n\n-   Working on a reproducible RStudio Project\n-   Working on a HTML report and example different YAML themes\n-   Practice Markdown syntax\n-   Practice R\n-   Practice R chunk options\n-   Gain experience on data wrangling using the `tidyverse` suite of packages\n-   Producing exploratory data analysis figures using the package `ggplot2`\n-   Learn how to add figure captions\n-   Create HTML tables and learn how to add captions\n\n\n## Exercise 1: Hands on practice with COVID-19 Data\n\n1.  The data for the tutorial is inside a folder called `data`, which is bundled with the RStudio Project you made in this week's workshop. Find that file in the lower right pane where all your files are listed.\n2.  Create a new section heading in your `qmd` document to read the data with the title \"Reading Avian Influenza Data\"\\\n    Hint: Use `#`\n3.  Inside this new section, create an R Code Chunk with options `echo: true`, `warning: false`, `message: false` called \"Reading data\" and insert the following code:\\\n\n``` r\ndat <- read_csv(\"data/avian_influenza_numbers.csv\")\n```\n\n4.  Insert a new R Chunk and find out what information you can get from the command `head(dat)`\n5.  Modify the `head` command to display 10 rows.\n6.  Create another two R chunks and use in each of them the R functions `glimpse()` and `str()`. What information can you get from those commands?\n    Hint: For more information on R functions, type in the R console `?glimpse()`.\n7.  Using an R inline command, write the dimension of the dataset in a sentence.\\\n    Hint: Have a look at `ncol` and `nrow`.\n8.  Add a new subsection heading (`###`) with \"Why is it important to know the dimension of your dataset?\" and write a brief sentence with the explanation\n9.  Add a new subsection heading (`###`) with \"What are the variable names in the dataset?\" and display the names of the dataset variables using R.\\\n    Hint: `?names()` in the R consolee\n10. Select two variables and use a markdown list to briefly explain what each of the variables are measuring.\n\n::: unilur-solution\n2.  The R chunk should look like this:\n\n```` verbatim\n# Reading data\n\n```{{r loading_data}}\n#| echo: true\n#| warning: false\n#| message: false\n\ndat <- read_csv(\"data/avian_influenza_numbers.csv\")\n```\n````\n\n4.  `head(dat)` will print the top five rows of the dataset.\n5.  `head(dat, n=10)`\n6.  `glimpse` prints the columns as rows, and the data across the screen. It shows the first view values and the type (class) of each column. `str` is similar but shows you detailed information about the dataframe object (as opposd to just the data).\n\n\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 370\nColumns: 26\n$ Range            <chr> \"1997-1999\", \"1997-1999\", \"1997-1999\", \"1997-1999\", \"â€¦\n$ Month            <chr> \"1/1/1997\", \"2/1/1997\", \"3/1/1997\", \"4/1/1997\", \"5/1/â€¦\n$ Vietnam          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Turkey           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Thailand         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Iraq             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Indonesia        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Egypt            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Djibouti         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ China            <dbl> 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4, 13, 0, 0, 0, 0, 0, 0â€¦\n$ Cambodia         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Nigeria          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Azerbaijan       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Pakistan         <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Myanmar          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Laos             <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Bangladesh       <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Canada           <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ India            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Nepal            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ `United Kingdom` <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Spain            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ `United States`  <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Ecuador          <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Chile            <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n$ Australia        <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,â€¦\n```\n\n\n:::\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [370 Ã— 26] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Range         : chr [1:370] \"1997-1999\" \"1997-1999\" \"1997-1999\" \"1997-1999\" ...\n $ Month         : chr [1:370] \"1/1/1997\" \"2/1/1997\" \"3/1/1997\" \"4/1/1997\" ...\n $ Vietnam       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Turkey        : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Thailand      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Iraq          : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Indonesia     : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Egypt         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Djibouti      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ China         : num [1:370] 0 0 0 0 1 0 0 0 0 0 ...\n $ Cambodia      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Nigeria       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Azerbaijan    : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Pakistan      : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Myanmar       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Laos          : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Bangladesh    : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Canada        : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ India         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Nepal         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ United Kingdom: num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Spain         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ United States : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Ecuador       : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Chile         : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n $ Australia     : num [1:370] 0 0 0 0 0 0 0 0 0 0 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Range = col_character(),\n  ..   Month = col_character(),\n  ..   Vietnam = col_double(),\n  ..   Turkey = col_double(),\n  ..   Thailand = col_double(),\n  ..   Iraq = col_double(),\n  ..   Indonesia = col_double(),\n  ..   Egypt = col_double(),\n  ..   Djibouti = col_double(),\n  ..   China = col_double(),\n  ..   Cambodia = col_double(),\n  ..   Nigeria = col_double(),\n  ..   Azerbaijan = col_double(),\n  ..   Pakistan = col_double(),\n  ..   Myanmar = col_double(),\n  ..   Laos = col_double(),\n  ..   Bangladesh = col_double(),\n  ..   Canada = col_double(),\n  ..   India = col_double(),\n  ..   Nepal = col_double(),\n  ..   `United Kingdom` = col_double(),\n  ..   Spain = col_double(),\n  ..   `United States` = col_double(),\n  ..   Ecuador = col_double(),\n  ..   Chile = col_double(),\n  ..   Australia = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n\n\nand for good measure\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 Ã— 26\n   Range     Month  Vietnam Turkey Thailand  Iraq Indonesia Egypt Djibouti China\n   <chr>     <chr>    <dbl>  <dbl>    <dbl> <dbl>     <dbl> <dbl>    <dbl> <dbl>\n 1 1997-1999 1/1/1â€¦       0      0        0     0         0     0        0     0\n 2 1997-1999 2/1/1â€¦       0      0        0     0         0     0        0     0\n 3 1997-1999 3/1/1â€¦       0      0        0     0         0     0        0     0\n 4 1997-1999 4/1/1â€¦       0      0        0     0         0     0        0     0\n 5 1997-1999 5/1/1â€¦       0      0        0     0         0     0        0     1\n 6 1997-1999 6/1/1â€¦       0      0        0     0         0     0        0     0\n 7 1997-1999 7/1/1â€¦       0      0        0     0         0     0        0     0\n 8 1997-1999 8/1/1â€¦       0      0        0     0         0     0        0     0\n 9 1997-1999 9/1/1â€¦       0      0        0     0         0     0        0     0\n10 1997-1999 10/1/â€¦       0      0        0     0         0     0        0     0\n# â„¹ 16 more variables: Cambodia <dbl>, Nigeria <dbl>, Azerbaijan <dbl>,\n#   Pakistan <dbl>, Myanmar <dbl>, Laos <dbl>, Bangladesh <dbl>, Canada <dbl>,\n#   India <dbl>, Nepal <dbl>, `United Kingdom` <dbl>, Spain <dbl>,\n#   `United States` <dbl>, Ecuador <dbl>, Chile <dbl>, Australia <dbl>\n```\n\n\n:::\n:::\n\n\n\n\n7.  Code example:\\\n\n\n\n\n\n```{.default}\nThe dataset has `r nrow(dat)` rows and `r ncol(dat)` variables.\n```\n\n\n\n\nOutput: The dataset has 370 rows and 26 variables.\n\n8.  Example markdown:\n\n\n\n\n\n````{.default}\n### Why is it important to know the dimension of your dataset?\nIt is important because it will help you to better understand the \nstructure of your data set. It will provide a clear information\nabout how many variables and how many individual cases  are \nin your data.\n\n### What are the variable names in the dataset?\n```{{r}}\nnames(dat)\n```\n````\n\n\n\n\nOutput: \n\n* `Range`: Contains a range of years. Class `character`. \n* `Month`: Month of the data, format is m/d/y. Class `character`.\n* Remaining columns: Country of case. Class `double`.\n\n### Why is it important to know the dimension of your dataset?\n\nIt is important because it will help you to better understand the structure of your data set. It will provide a clear information about how many variables and how many individual cases are in your data.\n\n### What are the variable names in the dataset?\n\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Range\"          \"Month\"          \"Vietnam\"        \"Turkey\"        \n [5] \"Thailand\"       \"Iraq\"           \"Indonesia\"      \"Egypt\"         \n [9] \"Djibouti\"       \"China\"          \"Cambodia\"       \"Nigeria\"       \n[13] \"Azerbaijan\"     \"Pakistan\"       \"Myanmar\"        \"Laos\"          \n[17] \"Bangladesh\"     \"Canada\"         \"India\"          \"Nepal\"         \n[21] \"United Kingdom\" \"Spain\"          \"United States\"  \"Ecuador\"       \n[25] \"Chile\"          \"Australia\"     \n```\n\n\n:::\n:::\n\n\n\n:::\n\n## Exercise 4: Data Wrangling\n\n1.  Using the R package `dplyr` (which is loaded with `tidyverse`), and using the pipe (`|>`), create a new dataset called `data_cleaned` that only contains the following variables:\n    -   `Month`\n    -   `Australia`\n    -   `Egypt`\n    -   `United States`\n    \n\n\n\n::: {.cell unilur-solution='true'}\n\n```{.r .cell-code}\ndata_cleaned <- dat |>\n    select(Month, Australia, Egypt, `United States`)\n```\n:::\n\n\n\n\n2.  Inspect `data_cleaned` and describe using a markdown list the type of variables in this new dataset. Write the names of the variables in bold. Do you think the variable attributes are correct?\n\n::: unilur-solution\n\n\n\n\n```{.default}\n* `Month` is a character (`<chr>`)\n* `Australia`, `Egypt` and `United States` are character (`<chr>`)\n```\n\n\n\n\nWe would expect `Month` to be a date\n:::\n\n3.  Convert the variable `date` into a date vector using `lubridate::mdy`. What do you notice?\n\n::: unilur-solution\nLet's put it in a new object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_monthly <- data_cleaned |>\n    mutate(monthdate = lubridate::mdy(Month))\n```\n:::\n\n\n\n\nThere are some missing values. If we filter by these,\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_monthly |> filter(is.na(monthdate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 32 Ã— 5\n   Month Australia Egypt `United States` monthdate\n   <chr>     <dbl> <dbl>           <dbl> <date>   \n 1 <NA>         NA    NA              NA NA       \n 2 <NA>         NA    NA              NA NA       \n 3 <NA>         NA    NA              NA NA       \n 4 1997          0     0               0 NA       \n 5 1998          0     0               0 NA       \n 6 1999          0     0               0 NA       \n 7 2000          0     0               0 NA       \n 8 2001          0     0               0 NA       \n 9 2002          0     0               0 NA       \n10 2003          0     0               0 NA       \n# â„¹ 22 more rows\n```\n\n\n:::\n:::\n\n\n\n\nWe see it seems to be aggregated data that is `NA`, so we can safely ignore them.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_monthly <- data_monthly |> filter(!is.na(monthdate))\n```\n:::\n\n\n\n\n:::\n\n4.  Remove cases for which the data is aggregated or doesn't have a valid month.\n\n::: unilur-solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_monthly <- data_monthly |> filter(!is.na(monthdate))\n```\n:::\n\n\n\n:::\n\n5.  What is the dimension of this new data set? Compare it with the dimension of `cleaned_data`. How many cases have we lost?\n\n::: unilur-solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(data_monthly)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 338   5\n```\n\n\n:::\n\n```{.r .cell-code}\ndim(data_cleaned)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 370   4\n```\n\n\n:::\n:::\n\n\n\n\nWe have lost 32 cases for which we did not have information about age or gender.\n:::\n\n6.  Provide a table summary of the three countries using the `kable()` function from the `kableExtra` package. Give it the caption \"Summary of number of cases of Avian Influenza\".\n\n::: unilur-solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(knitr)\ndata_monthly |>\n    select(Egypt, Australia, `United States`) |>\n    summary() |>\n    kable(caption = \"COVID-19 Age Summary\")\n```\n\n::: {.cell-output-display}\n\n\nTable: COVID-19 Age Summary\n\n|   |    Egypt      |  Australia      |United States   |\n|:--|:--------------|:----------------|:---------------|\n|   |Min.   : 0.000 |Min.   :0.000000 |Min.   : 0.0000 |\n|   |1st Qu.: 0.000 |1st Qu.:0.000000 |1st Qu.: 0.0000 |\n|   |Median : 0.000 |Median :0.000000 |Median : 0.0000 |\n|   |Mean   : 1.062 |Mean   :0.002959 |Mean   : 0.2101 |\n|   |3rd Qu.: 0.000 |3rd Qu.:0.000000 |3rd Qu.: 0.0000 |\n|   |Max.   :50.000 |Max.   :1.000000 |Max.   :30.0000 |\n\n\n:::\n:::\n\n\n\n:::\n\n7. Visualize the case counts using a histogram and give an explanation about the information that a histogram convey. In addition change the x label in the plot to *Age* and remove the y axis label.\\\n    Hint: As a first step, do this for just one country. To do multiple countries at once, you will need to `pivot_longer` your dataset.\n\n::: unilur-solution\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ndata_monthly |>\n    ggplot(aes(x=Egypt)) +\n    geom_histogram(binwidth = 5) +\n    labs(x=\"Case counts in Egypt\", y=\"\")\n```\n\n::: {.cell-output-display}\n![](tutorial-02_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(tidyr)\ndata_monthly |>\n    # Drop the old month column\n    select(!Month) |>\n    # Pivot everything except monthdate\n    pivot_longer(!monthdate) |>\n    ggplot(aes(x=value, fill = name)) +\n    geom_histogram(binwidth = 5, position = \"dodge\") +\n    labs(x=\"Case counts of Avian Influenza\", y=\"\")\n```\n\n::: {.cell-output-display}\n![](tutorial-02_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n8. _Extension_: Change this plot to a time series plot, with one bar per month. As an extra challenge, split this out into three separate plots - one per country.\n\n::: {.unilur-solution}\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_monthly |>\n    # Drop the old month column\n    select(!Month) |>\n    # Pivot everything except monthdate\n    pivot_longer(!monthdate) |>\n    ggplot(aes(x=monthdate, y = value, fill = name)) +\n    geom_col() +\n    facet_wrap(~name, scales=\"free\") +\n    labs(x=\"Case counts of Avian Influenza\", y=\"\")\n```\n\n::: {.cell-output-display}\n![](tutorial-02_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n::: {.callout-important}\n\nAt the end of this tutorial, you should have a full QMD file that renders, including your code and the outputs from it. This means you can read it from top to bottom and remember what you did.\n:::\n",
    "supporting": [
      "tutorial-02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}