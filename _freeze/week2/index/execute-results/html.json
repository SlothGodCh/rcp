{
  "hash": "3b49adc3652f202fc564f5ece8e65a18",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Reproducible reports using Quarto\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 2\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 2\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Reproducible reports using Quarto\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 2\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n1. Set the basis for the unit\n2. Unit structure\n3. Assessment\n4. Introduction to reproducibility\n5. Looked at R, RStudio and `git`\n\n::: {.fragment}\nIn the tutorial, you got to know more about R, and some of the available R and RStudio resources to help you through the semester.\n:::\n\n::: {.fragment}\nYou were also introduced to ChatGPT that you can use to assist in your learning. We will be using ChatGPT ethically [as per the University guidelines](https://www.monash.edu/learnhq/build-digital-capabilities/create-online/using-artificial-intelligence).\n:::\n\n\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n* Quarto documents\n* R Code Chunk Options\n* Including images and figures\n* Computer file architecture\n* RStudio Projects\n* Good coding practices\n:::\n\nSecond hour: hands on practice\n\n# Scaffolding of reproducible research & reporting\n\n## Think of reproducible reporting as a project\n\nThe project needs to contain [all the resources needed]{.monash-green2} to produce a reproducible output.\n\n::: {.callout-tip}\n## Definition: Computational Reproducibility\n\nObtaining consistent computational results using the same input data, computational steps, methods, code, and conditions of analysis.\n:::\n\n## Elements of a reproducible project\n\n#### We need to have a plan to organise, store and make all the project files available {.center}\n\n* All the elements of the project should be files\n* All files should be stored within the project location (typically a folder)\n* All your files should be explicitly tied together\n\n## Project organisation example\n\n![](images/project1.png){fig-align=\"center\"}\n\n## Workflow for reproducible research\n\n![](images/data-science.png){fig-align=\"center\"}\n\n::: {.aside}\nAllison Horst (@allisonhorst)\n:::\n\n## Stages for reproducible data analysis and reporting\n\n::: {.incremental}\n* Clear research questions to be investigated\n* Clear objectives: what is the goal of this report?\n* Data gathering\n* Exploratory data analysis\n* Data analysis\n* Results presentation\n:::\n\n::: {.fragment}\n#### All of the above needs to be documented and tied together {.center}\n:::\n\n## In this unit\n\nWe will [create documents that are reproducible]{.monash-green2}\n\n* Incorporate analyses that are reproducible\n* Include report text\n* All combined together\n\nOur reproducible documents will be created using the scripting language [R]{.monash-blue} combined with [`quarto`]{.monash-blue}.\n\n# Let's talk about computer paths\n\nAnd then RStudio Projects\n\n# Computer paths\n\n![](images/nathan-anderson-uq5JjGK_4SE-unsplash.jpg){fig-align=\"center\"}\n\nWhere are files and folders stored on our computer?\n\n## Computer paths\n\n::: {.callout-tip}\n## Definition: Path\n\nA _path_ is the complete location or name of where a computer file, directory, device, or web page is located\n:::\n\nSome examples:\n\n* Windows: `C:\\Documents\\ETC5513`\n* Mac/Linux: `/Users/Documents/ETC5513`\n* Internet: `http://rcp.numbat.space/`\n\n## Absolute and Relative Paths\n\n::: {.callout-tip}\n## Definition: Absolute Path\n\nAn _absolute_ or _full_ path begins from the lowest level, typically a drive letter or root (`/`)\n:::\n\n::: {.callout-tip}\n## Definition: Relative Path\n\nA relative path refers to a location that is _relative_ to the current directory. They typically start with a `.` (although this may be hidden from the user)\n:::\n\nExamples:\n\n* Absolute path: `C:\\Documents\\ETC5513-Assignment-Solutions`\n* Relative path: `./assignment-solutions`\n\n## Absolute and Relative paths\n\nAbsolute paths are generally to be avoided - it is extremely unlikely another person will have the same absolute path as you.\n\nRelative paths can work on different systems.\n\n::: {.fragment}\n#### It is essential you understand where directories and files are within your computer {.center .monash-blue}\n\nHaving clarity about that and the projects file architecture gives you total control about their organisation.\n:::\n\n## Order versus mess\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/omid-kashmari-s34f0Wxbens-unsplash.jpg){fig-align=\"center\" width=\"60%\"}\n:::\n::: {.column width='50%'}\n![](images/sharon-mccutcheon-tn57JI3CewI-unsplash.jpg){fig-align=\"center\" width=\"60%\"}\n:::\n:::\n\n## Work projects\n\n* Give each project a unique working directory/folder\n* Clean file system: all files related to a single project should be in the same folder\n  * data (typically a folder)\n  * figures (typically a folder)\n  * code\n  * notes\n* All paths should be relative to the project folder. [Why?]{.monash-green2}\n* Remember, absolute paths are __not__ reproducible\n\n## RStudio Project Example\n\n* Data folder: Contains all the data for the project\n* Images/Figures folder: Contains all pictures not produced by your code in the qmd file\n* .Rproj file: [This gets added when we create an RStudio project]{.monash-green2}\n* qmd file\n* Other R scripts etc...\n\n![](images/project-example.jpg)\n\n## RStudio projects\n\nRStudio projects automatically handle relative paths and working directories\n\nYou can create an RStudio project\n\n* In a brand new directory\n* In an existing directory where you already have R Code and data\n* From a version control repository\n\n[Read more on Rstudio projects here](https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects)\n\n\n::: {.aside}\nThey are specific to RStudio -> If you use a different IDE you need a different solution\n:::\n\n## Creating a new project\n\nFile > New project > Fill out the Options\n\n![](images/newproject.png){fig-align=\"center\"}\n\n## RStudio Project Advantages\n\nWhen you make a new RStudio Project, it:\n\n* Creates a project file (with the `.Rproj` extension) within the project directory\n  * This file can be used a as a shortcut to open the project directly\n* Creates a hidden directory (`.Rproj.user`) where project-specific temporary fiels are stored\n* Loads the project into RStudio and displays it's name in the Projects toolbar\n\n## What is Markdown?\n\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain text documents.\n\nIt was created by John Gruber in 2004. [Read more here](https://www.markdownguide.org/getting-started/)\n\n* Markdown is a \"text\" formatting syntax\n* Can be rendered to more complex formats such as pdf, html, pdf, doc, ...\n\n# Good news!\n We can use markdown inside a type of documents called [Quarto files]{.monash-green2}\n\nToday, we'll learn how to do it.\n\n## Main tools for combining R code and text\n\nOur main tool is going to be `R` and it's packages. We will be using `R` via RStudio.\n\n* `R` is structured into libraries\n* For reproducibility, we have two libraries that are crucial\n* Does anyone know which ones are those?\n\n![](images/Rstudio.png){fig-align=\"center\" width=\"40%\"}\n\n# Quarto and `knitr`\n\n* Quarto is a new piece of software (with corresponding R package) that allows us to create documents using **Markdown**\n* `knitr` is an R package that allows us to render `quarto` code into html, pdf, doc etc\n\n::: {.columns}\n::: {.column width=\"50%\"}\n![](images/quarto_hex.svg){fig-align=\"center\" width=\"40%\"}\n:::\n::: {.column width=\"50%\"}\n![](images/knitr_0.png){fig-align=\"center\" width=\"40%\"}\n:::\n:::\n\n## Quarto documents\n\n* Quarto could be considered a file format, for making dynamic documents with R.\n* Quarto documents have extension `qmd`\n\n## Quarto\n\n::: {.callout-tip}\n## Quarto\n* Provides an environment where you can write your complete analysis, and combines your text and code together into a rich document\n* You write your code as code chunks, put your text around that, and then you get a fully reproducible document\n:::\n\n## Elements in a Quarto Document\n\n#### There are three parts to a Quarto document {.center}\n\n1. Metadata (YAML)\n2. Text (formatted with Markdown)\n3. Code (code formatting)\n\n::: {.fragment}\nBefore we dive into the Quarto file structure, let's talk about Markdown.\n:::\n\n## Dynamic documents\n\nQuarto + `knitr` = Dynamic document\n\n* Quarto allows us to not only use Markdown to write the [text]{.monash-green2} in the report, it also allows us to include [R code]{.monash-green2}.\n* `knitr` combines with `pandoc` to render documents that contain a mixture of these components\n* `pandoc` is used by the `quarto` package to [**render**]{.monash-blue} a `qmd` file into a new format.\n\n::: {.aside}\nPandoc is a universal document converter. \n\nIt takes Markdown, word documents, powerpoint slides, LaTeX and a bunch of other documents and converts between them.\nYou can read more about Pandoc [here](https://pandoc.org).\n:::\n\n## Possible outputs\n\n![](images/qmd-system.png){fig-align=\"center\" width=\"40%\"}\n\n## Quarto file structure\n\nThree main components: **YAML**, **text** and **R code chunks**.\n\n![](images/qmd-file-structure.png){fig-align=\"center\" width=\"60%\"}\n\n## Component breakdown: YAML\n\n**Metadata** is written at the top of the file, between `---` in YAML.\n\n```yaml\n---\ntitle: \"ETC5513\"\nauthor: \"Michael Lydeamore\"\nformat: html\n---\n```\n\n\n\n## Component breakdown: Text\n\n**Text** is written in Markdown\n\n```markdown\n# This is a section header\n```\n### This is a section header\n\n```markdown\n## This is a subsection header\n```\n#### This is a subsection header\n\n```markdown\nIn this section, something is **important**\n```\nIn this section, something is **important**\n\n## Writing text, hyperlinks and sections\n\n[Using Markdown:]{.monash-green2} we can write plain text as we would do in any text processor.\n\n::: {.fragment}\nWe can easily add hyperlinks:\n\n::: {.columns}\n::: {.column width=\"50%\"}\nCode:\n```markdown\n[More info about Quarto here](https://quarto.org)\n```\n:::\n::: {.column width=\"50%\"}\nResult:\n\n[More info about Quarto here](https://quarto.org)\n:::\n:::\n:::\n\n## Font types\n\nWe can write things in italic or bold:\n\n::: {.columns}\n::: {.column width=\"50%\"}\nCode:\n```markdown\n__bold__, **bold**,\n\n_italic_, *italic*\n```\n:::\n::: {.column width=\"50%\"}\nResult:\n\n__bold__, **bold**,\n\n_italic_, *italic*\n:::\n\n:::\n\n## Markdown example\n\n::: {.columns}\n::: {.column width='50%'}\nCode:\n```markdown\n# Header 1\n## Header 2\n\n* Unordered list 1\n\n_This is italic_\n\n*So is this*\n\n**This is bold**\n\n1. Ordered list 1\n```\n:::\n::: {.column width='50%'}\nResult:\n\n### Header 1\n#### Header 2\n\n* Unordered list 1\n\n_This is italic_\n\n*So is this*\n\n**This is bold**\n\n1. Ordered list 1\n:::\n:::\n\n## Markdown component: code\nR Code is included in [chunks]{.monash-green2}:\n\n::: {.columns}\n::: {.column width='50%'}\nCode:\n\n````\n```{{r}}\n#| echo: false\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n``` \n````\n\n:::\n::: {.column width='50%'}\nResult:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/index.rmarkdown/unnamed-chunk-2-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n:::\n\n## R code {.scrollable}\n\n::: {.columns}\n::: {.column width='50%'}\nCode:\n\n````\n```{{r}}\n#| echo: false\n\nlibrary(ggplot2)\n\ndata = data(InsectSprays)\n\nhead(InsectSprays)\n```\n...\n```{{r}}\n#| echo: false\nggplot(data = InsectSprays,\n       aes(x = spray,\n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\n\n````\n:::\n::: {.column width='50%'}\nResult:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output .cell-output-stdout}\n\n```\n  count spray\n1    10     A\n2     7     A\n3    20     A\n4    14     A\n5    14     A\n6    12     A\n```\n\n\n:::\n:::\n\n\n\n...\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](images/index.rmarkdown/unnamed-chunk-4-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n:::\n:::\n\n## R Code Chunks {.smaller}\n\nYou can quickly insert an R code chunk into your file with:\n\n* Keyboard shortcut [Ctrl + Alt + I]{.monash-green2} (Mac: Cmd + Option + I)\n* The [Add Chunk]{.monash-green2} command in the editor toolbar or\n* Typing the chunk delimeters (```)\n\n::: {.fragment}\nChunk output can be customised with [Chunk execution options](https://quarto.org/docs/computations/execution-options.html), which are at the top of a chunk, starting with `#|`.\n\n* `include: false` prevents code and results appearing in the finished file. The code is still run and results can be used in other chunks.\n* `echo: false` prevents code but not results appearing in the finished file. This is a useful way to embed figures.\n:::\n\n## More chunk options\n\n* `eval: false` does not evaluate (or run) this code chunk when knitting\n* `message: false` prevents messages that are generated by code appearing in the finished file\n* `warning: false` prevents warnings that are generated appearing in the finished file\n* `fig.cap = \"Text\"` adds a caption to a figure\n* `fig-align = \"center\"` sets the position it will appear\n\n::: {.fragment}\nThere are loads more of these - see the Quarto documentation for a complete list.\n:::\n\n## Global options\n\nTo set **global options** that paply to every chunk in your file, call `knitr::opts_chunk$set()` in a code chunk. \n\nThese will be treated as a global default _that can be overwritten_ by individual chunk headers.\n\nExample:\n\n`knitr::opts_chunk$set(echo = FALSE)`\n\n## Caching\n\nLong documents can take a long time to run. Quarto has a caching system that can help manage this long execution time.\n\nYou can set cache as either a chunk option (using `#|`) or globally in YAML:\n\n```yaml\nexecute:\n  cache: true\n```\n\nMore info on caching is in the [Quarto manual](https://quarto.org/docs/projects/code-execution.html)\n\n::: {.fragment}\nUse these with care: It is easy to accidentally _not_ refresh an updated chunk!\n:::\n\n## Example\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/first-quarto.jpg){fig-align=\"center\"}\n:::\n::: {.column width='50%'}\n![](images/first-quarto-render.jpg){fig-align=\"center\"}\n:::\n:::\n\n## Rendering Quarto to HTML\n\nUse the \"Render\" button at the top\n\n![](images/quarto-export-demo.png)\n\n## Rendering Quarto to PDF\n\nWe can also knit to a PDF:\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/first-quarto-pdf.jpg){fig-align=\"center\" width=\"90%\"}\n:::\n::: {.column width='50%'}\n![](images/first-quarto-pdf-render.jpg){fig-align=\"center\"}\n:::\n:::\n\n::: {.aside}\nRendering a PDF requires LaTeX installed. LaTeX is a high-quality typesetting system, and includes features designed for the production of technical and scientific documentation. We will be using the `tinytex` [R package](https://yihui.org/tinytex/)\n:::\n\n## `knitr` and Pandoc\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/knitr_0.png){fig-align=\"center\"}\n:::\n::: {.column width='50%'}\nPandoc: The document converter\n\n[https://pandoc.org/index.html](https://pandoc.org/index.html)\n:::\n:::\n\n* `knitr` executes the code and converts the .qmd to a .md\n* Pandoc renders the .md to the output format you want\n\n## Let's learn about YAML\n\n```yaml\ntitle: \"R Notebook\"\nauthor: \"Michael Lydeamore\"\nformat: \n  html:\n    toc: true\n    theme: solar\n  pdf:\n    toc: true\n  docx:\n    toc: true\n```\n\n`toc`: Table of contents. You can read more abotu that [here](https://quarto.org/docs/output-formats/html-basics.html#table-of-contents)\n\n## This is the resulting HTML\n\n![](images/quarto-new-theme.jpg)\n\n## Tables and Captions {.scrollable}\n\nCode:\n\n```{{r}}\nlibrary(dslabs)\ndata(murders)\ntable_data <- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\n\nResult:\n\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\nTable: Gun murder data\n             from FBI reports by state\n\n|state      |abb |region | population| total|\n|:----------|:---|:------|----------:|-----:|\n|Alabama    |AL  |South  |    4779736|   135|\n|Alaska     |AK  |West   |     710231|    19|\n|Arizona    |AZ  |West   |    6392017|   232|\n|Arkansas   |AR  |South  |    2915918|    93|\n|California |CA  |West   |   37253956|  1257|\n\n\n:::\n:::\n\n\n\n\n## Tables and Captions\n\nCode:\n\n```{{r}}\nlibrary(dslabs)\ndata(murders)\ntable_data <- head(murders, 5)\n\nknitr::kable(table_data, \n             caption = \"Gun murder data\n             from FBI reports by state\",\n             digits = 2)\n```\n\nFor more information, type `knitr::kable()` into your R console.\n\n## Figures and captions\n\nFigures from R are created inside code chunks.\n\nTypically, we will generate figures using `ggplot2`\n\nInside the code chunk, we use the `fig-cap` chunk option to generate a caption.\n\nYou will also want to include `fig-label` so it gets a number.\n\n## Figures and captions\n\n```{{r}}\n#| fig-label: cars-plot\n#| fig-cap: \"Distance taken for a car to stop, against it's speed during the test.\"\n\nlibrary(ggplot2)\nggplot(cars, \n       aes(x = speed, \n           y = dist)\n       ) +\n  geom_point()\n``` \n\n\n\n\n::: {.cell layout-align=\"center\" fig-label='cars-plot'}\n::: {.cell-output-display}\n![Distance taken for a car to stop, against it's speed during the test.](images/index.rmarkdown/unnamed-chunk-6-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\n\n\n## Inserting external images/photos/figures\n\nThere are two different ways to include external pictures.\n\n```{{r}}\n#| out-width: \"80%\"\nknitr::include_graphics(\"images/R.png\")\n```\n\nor\n\n```\n![](images/R.png){width=\"80%\"}\n```\n\nI recommend the latter unless for some reason you need some specific R processing.\n\n::: {.fragment}\nNote these don't have to be local links. URLs work just fine!\n\n::: {.columns}\n::: {.column width='75%'}\n```\n![](https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif)\n```\n\n:::\n::: {.column width='25%'}\n![](https://media.giphy.com/media/JIX9t2j0ZTN9S/giphy.gif){width=\"50%\" fig-align=\"right\"}\n:::\n:::\n\n:::\n\n## Now we know how to create a qmd file\n\n#### But there is more to a project than that {.center}\n\nA project might have:\n\n* Data,\n* Other R or Quarto scripts\n* Figures etc\n\nAll the documents related to a project should be in one _folder_, often under an RStudio Project.\n\n# Good Coding Style\n\n![](https://media.giphy.com/media/26tOZ42Mg6pbTUPHW/giphy.gif)\n\n## Good Coding Style\n\nCoding style is an opinion-based phenomenon\n\nThere are different styles and it is important to be careful about how you write your code.\n\n**Bad example**:\n\n```{{r}}\nlibrary(ggplot2)\ndata = data(InsectSprays)\nggplot(data=InsectSprays, aes(spray, count, fill=spray))+geom_boxplot(alpha=0.6)+ggtitle(\"Insect sprays boxplots\")\n```\n\n::: {.fragment}\nLong lines, no spaces, no structure: makes it _very_ hard to read and debug\n:::\n\n## Good example\n\n```{{r}}\nlibrary(ggplot2)\n\nggplot(data = InsectSprays,\n       aes(x = spray, \n           y = count,\n           fill = spray)\n       ) +\n  geom_boxplot(alpha = 0.6) +\n  ggtitle(\"Insect sprays boxplots\")\n```\n\nWe will (mostly) follow the Tidyverse style guide\n\n* <https://style.tidyverse.org>\n* <http://adv-r.had.co.nz/Style.html>\n\n## Good coding principles\n\n* Source code should be readable by humans and self-explanatory\n* Long sentences are not good (maximum 80-100 characters)\n* Inside R code chunks, the `tidyverse` style guide is a good guide:\n  * Use spaces around `<-`, `+`, `=`, `-`, after `,` and before `{`\n  * For comments inside yoru code, use `#`\n\n::: {.callout-important}\nThe more organised you are writing your code, the eaiser it will be to read it and debug it\n:::\n\n## Practices for reproducible research\n\n* Have a plan to [organise]{.monash-green2}, [store]{.monash-green2}, and make your files [available]{.monash-green2}\n* Set up an [RStudio Project]{.monash-green2} for each of your projects\n* Make sure all the steps in your analysis are documented\n* All files should be human readable\n* All files related to a project should be explicitly tied together\n\n## Reproducible workflow\n![](images/environmental-data-science-r4ds-general.png){fig-align=\"center\" width=\"70%\"}\n\n## Week 2 Lesson\n\n::: {.callout-important}\n## Summary\n\n* Quarto documents\n* R Code Chunk Options\n* Including figures, tables, captions\n* RStudio projects\n* Good Coding Practices\n:::\n\n::: {.callout-tip}\n## Resources\n\n* <https://quarto.org/>\n* <https://www.markdownguide.org/getting-started/>\n* <https://support.rstudio.com/hc/en-us/articles/200526207-Using-Projects>\n* <https://style.tidyverse.org>\n:::\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}