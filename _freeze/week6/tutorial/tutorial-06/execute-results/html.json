{
  "hash": "0c8e6827cae97dca9126f3c1c0dfffe4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 6\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html:\n        output-file: index.html\n        embed-resources: true\n    unilur-html+solution:\n        output-file: solution.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n# 🤝 Workshop: Forking, Branching, and Rebasing with Quarto\n\nIn this workshop, you'll practice collaborative editing using **branches**, **rebasing**, and **pull requests** in a Quarto project.\n\nYou’ll simulate a real-world collaboration scenario:\n- One student makes changes to the main branch\n- Another student works on a feature branch\n- Before contributing, the second student rebases to keep history clean\n\n---\n\n## 🧑‍🤝‍🧑 Step 1: Pair Up\n\nAssign roles:\n\n- **Student A** = Repository owner  \n- **Student B** = Contributor\n\nYou’ll swap roles after completing the exercise.\n\n---\n\n## 🛠️ Step 2: Student A – Set Up the Repository\n\n1. Create a new GitHub repo named something like `quarto-rebase-demo`  \n2. ✅ Add a README file  \n3. Clone it locally:\n\n```bash\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n```\n\n4. Create a Quarto file called `collab.qmd`:\n\n```markdown\n---\ntitle: \"Rebase Demo\"\nformat: html\n---\n\n# Introduction\n\nThis is a collaborative Quarto project.\n\n# Contributions\n\n<!-- Student sections will go here -->\n```\n\n5. Commit and push:\n\n```bash\ngit add collab.qmd\ngit commit -m \"Add initial Quarto file\"\ngit push origin main\n```\n\n6. Share the GitHub link with Student B.\n\n✅ Student B can now fork the project.\n\n---\n\n## 🍴 Step 3: Student B – Fork, Branch, and Contribute\n\n1. Fork Student A’s repository on GitHub  \n2. Clone your fork:\n\n```bash\ngit clone git@github.com:your-username/quarto-rebase-demo.git\ncd quarto-rebase-demo\n```\n\n3. Create a **new branch** for your work:\n\n```bash\ngit branch my-section\ngit switch my-section\n```\n\n4. Open `collab.qmd` and add your section under “# Contributions”:\n\n```markdown\n# Jamie’s Section\n\nThis is my contribution to the Quarto project.\n```\n\n5. Save the file, then stage and commit:\n\n```bash\ngit add collab.qmd\ngit commit -m \"Add Jamie’s section\"\n```\n\n✅ Don’t push yet — Student A will now make another change.\n\n---\n\n## 🧱 Step 4: Student A – Make Another Commit on `main`\n\nWhile Student B is working, Student A adds a new section to `collab.qmd`:\n\n```markdown\n# Instructor's Section\n\nThis section was added after Student B began work.\n```\n\n1. Save the file, then commit and push:\n\n```bash\ngit add collab.qmd\ngit commit -m \"Add instructor’s section\"\ngit push origin main\n```\n\n✅ Now Student B’s branch is behind `main`.\n\n---\n\n## 🔄 Step 5: Student B – Merge In Latest `main`\n\n1. Check your remotes:\n\n```bash\ngit remote -v\n```\n\nYou should only see one remote called `origin`\n\n2. Add Student A’s repo as a remote:\n\n```bash\ngit remote add upstream git@github.com:student-a-username/quarto-rebase-demo.git\ngit fetch upstream\n```\n\n3. Check your remotes and branches again:\n\n```bash\ngit remote -v\ngit branch -v\n```\n\n4. Rebase your branch:\n\n```bash\ngit merge upstream/main\n```\n\n5. If there are any conflicts, Git will pause and show them in `collab.qmd`. Edit the file and resolve them manually. It might look like this:\n\n```markdown\n<<<<<<< HEAD\n# Jamie’s Section\nThis is my contribution to the Quarto project.\n=======\n# Instructor's Section\nThis section was added after Student B began work.\n>>>>>>> upstream/main\n```\n\n6. After fixing the file, run:\n\n```bash\ngit add collab.qmd\ngit commit -m \"Merge conflict in upstream\"\n```\n\n7. Once merging is complete, push your changes to your fork:\n\n```bash\ngit push origin main\n```\n\n---\n\n## ✅ Step 6: Create a Pull Request\n\n1. Go to your fork on GitHub  \n2. Click **“Compare & pull request”**  \n3. Make sure your PR is from `main` → `main` (on Student A’s repo)  \n4. Click **Create pull request**\n\n✅ Your caught-up contribution is now ready for review!\n\n---\n\n## 📬 Step 7: Student A – Review and Merge\n\n1. Open the pull request  \n2. Check the changes  \n3. Click **Merge pull request** → **Confirm merge**\n\n🎉 Now the `main` branch has clean history and includes both contributions!\n\n---\n\n## ✅ Summary\n\nYou now know how to:\n\n- Fork and clone a GitHub repository\n- Work on a feature branch\n- Merge changes onto the latest `main`\n- Submit a clean pull request\n\n✨ You’ve just used a professional Git workflow!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}