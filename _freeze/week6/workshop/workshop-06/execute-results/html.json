{
  "hash": "7fd4a8965ae0cd7945f20d118744bde3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Workshop 6\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html: \n        embed-resources: true\n        output-file: \"index.html\"\n        toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n# 🔄 Git Undo Workshop: `git revert` and `git reset`\n\nMistakes happen — that’s why Git gives us powerful tools to undo changes. In this workshop, you’ll learn two of the most useful commands for fixing things:\n\n- `git revert`: Undo a **commit** by creating a new commit that cancels it out\n- `git reset`: Move your branch pointer to a previous commit (⚠️ this can rewrite history!)\n\n---\n\n## 🛠️ What You’ll Learn\n\n- The difference between `revert` and `reset`\n- How to safely undo changes\n- When to use which command\n\n---\n\n## 🧑‍💻 1. Create a New Repository on GitHub\n\n1. Go to [https://github.com](https://github.com) and log in  \n2. Click **+ → New repository**  \n3. Name it something like `git-undo-demo`  \n4. ✅ Check **Add a README file**  \n5. Click **Create repository**  \n6. Click the green **Code** button → Select **SSH** → Copy the URL\n\n---\n\n### 💻 2. Clone the Repository Locally\n\nOpen your terminal and run:\n\n```bash\ngit clone git@github.com:your-username/git-undo-demo.git\ncd git-undo-demo\n```\n\n---\n\n### ✍️ 3. Add Content to the README\n\nWe’ll simulate a few commits by editing the `README.md` file.\n\n1. Open `README.md` in RStudio or your preferred text editor  \n2. Add a line at the bottom like:\n\n```markdown\nLine 1: Initial test message\n```\n\n3. Save the file, then run:\n\n```bash\ngit add README.md\ngit commit -m \"Add line 1\"\n```\n\n4. Repeat the process three more times, adding different lines like:\n\n```markdown\nLine 2: More changes\nLine 3: Experimental note\nLine 4: Oops! Maybe not needed\n```\n\nEach time, save the file, then:\n\n```bash\ngit add README.md\ngit commit -m \"Add line X\"\n```\n\n✅ You should now have 4 commits, each adding a line to `README.md`.\n\nCheck your commit history:\n\n```bash\ngit log --oneline\n```\n\n---\n\n## 🧪 Part 1: `git revert` (Safe Undo)\n\nLet’s say you want to undo the \"Add line 3\" commit — but **without changing the history**.\n\n1. Find the commit hash:\n\n```bash\ngit log --oneline\n```\n\nCopy the hash for \"Add line 3\", then:\n\n```bash\ngit revert <hash>\n```\n\nGit will create a **new commit** that undoes the changes from that commit.\n\n✅ This is a **safe** way to undo changes — especially useful on shared branches like `main`.\n\n---\n\n## 🧪 Part 2: `git reset` (Rewriting History)\n\nNow let’s try using `reset` to go back in time.\n\n---\n\n### ⚠️ Warning\n\n`reset` actually moves your branch pointer and can **remove commits** — so it’s best used on branches that only you are working on (like `feature` branches).\n\n---\n\n### 🧹 1. Soft Reset\n\nThis keeps your changes, but undoes the last commit:\n\n```bash\ngit reset --soft HEAD~1\n```\n\nYou can now edit or recommit with a new message.\n\n---\n\n### 🧼 2. Mixed Reset (default)\n\nThis keeps the file changes but **unstages** them:\n\n```bash\ngit reset HEAD~1\n```\n\nRun `git status` to see your changes — they’re back in the working directory.\n\n---\n\n### 🔥 3. Hard Reset (Be Careful!)\n\nThis **discards** the last commit *and* any changes:\n\n```bash\ngit reset --hard HEAD~1\n```\n\n✅ Your repo is now rolled back one commit — as if it never happened.\n\n---\n\n## 💡 Summary: When to Use What\n\n| Command         | Does What?                                | Safe for Shared Branches? |\n|----------------|--------------------------------------------|----------------------------|\n| `git revert`    | Creates a new commit to undo a change      | ✅ Yes                     |\n| `git reset --soft`  | Moves HEAD, keeps changes staged        | ⚠️ Not recommended         |\n| `git reset`     | Moves HEAD, keeps changes unstaged         | ⚠️ Not recommended         |\n| `git reset --hard` | DANGEROUS: Deletes changes + commits    | ❌ Never on shared branches |\n\n---\n\n# 📦 Using `git stash`\n\nSometimes you make changes in your working directory, but you're not ready to commit them — and you need to switch branches or pull updates. `git stash` lets you save your changes temporarily without committing.\n\n---\n\n## 🛠️ Goal\n\nLearn how to:\n- Save changes using `git stash`\n- Switch branches safely\n- Reapply your stashed work\n\n---\n\n## 🧪 Step-by-Step Instructions\n\n1. Make sure you're inside a Git-tracked project (any project will do).\n\n2. Open a file and make **some changes** — but **don’t commit** yet.\n\n3. Check your Git status:\n\n```bash\ngit status\n```\n\nYou should see the file listed as modified.\n\n---\n\n### 📦 1. Stash Your Changes\n\nRun:\n\n```bash\ngit stash\n```\n\n✅ This saves your changes and returns your working directory to a clean state.\n\n---\n\n### 🔄 2. Switch Branches (or Pull)\n\nNow try switching to another branch:\n\n```bash\ngit checkout main\n```\n\nOr do a pull:\n\n```bash\ngit pull\n```\n\n✅ Your working directory stays clean — no conflicts!\n\n---\n\n### ♻️ 3. Reapply the Stash\n\nWhen you're ready to bring back your changes:\n\n```bash\ngit stash apply\n```\n\n✅ Your edits will be restored to the files you changed.\n\n---\n\n### 🗑️ 4. (Optional) Clear the Stash\n\nAfter applying, you can remove the stash:\n\n```bash\ngit stash drop\n```\n\nOr, to both apply *and* drop in one step:\n\n```bash\ngit stash pop\n```\n\n---\n\n🎉 You’ve learned how to pause your work safely and come back to it later!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}