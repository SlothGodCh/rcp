{
  "hash": "5439089c61d8a5a95510abb2df8ce05a",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Referencing, large files, and GitHub Issues\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 9\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 9\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Referencing, large files, and GitHub Issues\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 9\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n* Start learning about LaTeX\n* LaTeX integration in QMD files\n* Understand commits and SHA1 numbers\n* Moving back to past commits\n* Reverting commits\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n\n* Learn how to add references and bibliography\n* Dealing with large files\n* Tags\n* GitHub issues\n\n:::\n\n## Parts of a LaTeX file\n\n\n\n\n::: {.cell layout-align=\"center\"}\n\n```{.tex .cell-code}\n\\documentclass{article} % Preamble/header: load packages, set options\n\\usepackage{amsmath}\n\\author{M. J. Lydeamore}\n\n\\begin{document} % Body starts here, and goes until corresponding 'end'\n\n\\section{Introduction}\n\n\\end{document} % \"After body\" but before end\n```\n:::\n\n\n\n\nThe `includes-in-*` sections in Quarto go into each of these pieces of the LaTeX code.\n\n## Different ways to include LaTeX {.incremental}\n\n1. Manually typing out the code\n2. Using an input `.tex` file\n3. Customised template file\n\n::: {.fragment}\nMany templates are available:\n\n[Journal articles](https://quarto.org/docs/journals/)\n[Monash templates](https://robjhyndman.com/hyndsight/quarto_templates.html)\n[Question/Answer templates](https://github.com/ginolhac/unilur)\n:::\n\n# Referencing\n\nThere's a system for it, _never_ do it manually!\n\n## The bibliography file\n\nFirst thing we need is a place to store information about our references.\n\nA standard file format is called the _bibliography database file_ (which ends in `.bib`).\n\n![](images/bib.png){fig-align=\"center\"}\n\n## The bibliography file\n\n* To cite a paper in the text, we use the key from the bib file\n* These files are _plain text_, so you can open them in RStudio or VSCode\n\n::: {.incremental}\nTo get bib entries:\n\n* Google Scholar\n* Reference manager such as Zotero or Mendeley\n:::\n\n## The bibliography file: Example\n\n```\n@Manual{R-base,\n  title = {R: A Language and Environment for Statistical\n           Computing}, \n  author = {{R Core Team}},\n  organization = {R Foundation for Statistical Computing},\n  address = {Vienna, Austria},\n  year = {2019},\n  url = {https://www.R-project.org},\n}\n```\n\n::: {.fragment}\nTo cite this in your quarto file, use `@R-base`\n:::\n\n\n## Citing R packages\nYou can get the citations for R packages using `toBibtex(citation(\"tidyverse\"))`\n\n![](images/citatitionrpackages.png){fig-align=\"center\"}\n\n# Demo & Practice\n\n## Large files in `git` and GitHub\n\nWhat happens when you commit a big file on GitHub?\n\n__Files larger than 50mb won't upload properly__\n\n::: {.fragment}\nInstead, we deal with these using Git Large File Storage (lfs).\n\n[Please see info for installation here and **make sure you install this extension**.](https://git-lfs.github.com)\n:::\n\n::: {.fragment}\nGitHub and BitBucket both have LFS support, and handle changes to these files much more sensibly.\n:::\n\n## Setup for `git` LFS\n\nTo set up large file storage:\n\n* Navigate to the repo\n* In the CLI, type `git lfs install`\n\nNow, large files can be tracked using the relevant command. For example:\n\n```\ngit lfs track '*.nc'\ngit lfs track '*.csv'\ngit lfs track '*.pdf'\n```\n\n**Note the quotes!**\n\n::: {.fragment}\nThis will create a `.gitattributes` file. Make sure to add this to your repo.\n\nThen, use your standard workflow of add, commit, push.\n:::\n\n## Summary\n\n1. Navigate to the local repo and run `git lfs install`\n2. `git lfs track \"*.csv\"\n3. `git add .gitattributes`\n4. `git add data.csv` as per normal\n\n::: {.fragment}\nIt is essential you run `git lfs install` before committing and pushing, otherwise you will get an error message.\n:::\n\n## What if I already have a large file?\n\nIf you have committed a large file, you probably got an error message you have to fix.\n\nRecall:\n\n```\ngit reset --soft HEAD~1\n```\n\nThen:\n\n```\ngit lfs install\ngit add .gitattributes file.csv\ngit commit -m \"Adding data files through GIT LFS\"\ngit push origin main\n```\n\n# Demo\n\n## More on committing\n\nSo far, we've used a [one-line commit]{.monash-blue} (although we could do with more practice on those)\n\n::: {.fragment}\nWe can add more text into a commit, and many times this is sensible.\n\nDetailed commit structure:\n\n[First line]{.monash-green2}\n\n[Blank line]{.red}\n\n[Rest of the text]{.monash-green2}\n:::\n\n![](images/commitsexample.png){fig-align=\"center\"}\n\n# Demo\n\n## Git tags\n\n[tags]{.monash-green2} are custom labels or references that point to specific points in your `git` history\n\nGenerlaly used to capture a specific point in the repo history, like a release, or a report milestone.\n\n::: {.callout-tip}\nYou can think of a tag like a branch that doesn't change\n:::\n\nUnlike branches, tags don't have any further history of commits.\n\nGreat tutorial on [tags here](https://www.atlassian.com/git/tutorials/inspecting-a-repository/git-tag)\n\n## Git tags example\n\n![](images/tags.png){fig-align=\"center\"}\n\n## Types of tags\n\nThere are two types of tags: [lightweight]{.monash-green2} and [annotated]{.monash-green2}. The difference is the metadata they come with.\n\nBest practice is [lightweight]{.monash-green2} tags for personal use, and [annotated tags]{.monash-green2} as marks for version releases\n\nAnnotated tags stores extra metadata like the tagger name, email and date\n\nLightweight tags are only a pointer to a commit.\n\n![](images/tagex.png){fig-align=\"center\"}\n\n\n## Creating and sharing tags\n\nTo create an annotated tag:\n\n```\ngit tag -a v 1.0\n```\n\nor\n\n```\ngit tag -a v1.0 SHA1\n```\n\nThis will create a new _annotated_ tag with label [v1.0]{.monash-green2}. The command will open your text editor for further metadata.\n\n## Annotated tag example\n![](images/taga.png){fig-align=\"center\"}\n\n## Lightweight tags\n\n`git tag v1.0` will create a lightweight tag\n\n::: {.fragment}\nCan you spot the difference?\n:::\n\n## Listing tags\n\n`git tag`\n\n![](images/tagslist.png){fig-align=\"center\"}\n\n`git tag -n` will also show us the associated message, or you can do `git show tagname`\n\n## Tagging old commits\n\nBy default, `git tag` creates a tag on HEAD\n\nIf you want to tag an old commit:\n\n```\ngit log --oneline\ngit tag -a v1.2 15027957951b64cf874c3557a0f\n```\n\n## Sharing tags\n\nSharing tags is similar to pushing branches.\n\n**By default, `git push` does not push tags**\n\n`git push origin tagname` will push the tag.\n\n## Viewing your tags on GitHub\n\n![](images/tagsgh1.png){fig-align=\"center\"}\n\n## Viewing your tags on GitHub\n\n![](images/tagsgh2.png){fig-align=\"center\"}\n\n## Checking tags\n\nYou can check out tags: `git checkout v1.0`\n\nThis will put you in a detached HEAD state, so commits won't be recorded\n\n::: {.fragment}\nUnless??\n:::\n\n## Deleting a tag\n\n* `git tag`: Lists tags\n* `git tag -d v1`: Deletes tag v1\n* `git push origin --delete v1`: Deletes it from the remote\n\n## Why use tags?\n\nWe could just use a branch (that never gets merged) instead of a tag.\n\nFor storing points in history, this is fine (although not the intention of a branch)\n\nA branch is supposed to be a \"variation\" on the main repository, not a point-in-time record\n\nTags are designed to fill that void.\n\n![](images/branches.png){fig-align=\"center\"}\n\n# GitHub Issues\n\n\"I have a problem\"\n\n## GitHub Issues\n\nYou can create a GitHub Issue on the web:\n\n![](images/issue.png){fig-align=\"center\"}\n\n## GitHub Issues\n\nYour collaborators can see the issue:\n\n![](images/collaboratorsissue.png){fig-align=\"center\"}\n\n## More on issues\n\n![](images/issues.png){fig-align=\"center\"}\n\n[More info about issues here](https://guides.github.com/features/issues/)\n\n# Practice time\n\n\n## Week 9 Lesson\n\n::: {.callout-important}\n* Learn how to add references and bibliography\n* Dealing with large files\n* Tags\n* GitHub issues\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}