{
  "hash": "b408e98ef362a85e4e2d6846cb9a9109",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Undoing, exporing and cleaning with git\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 7\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 7\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n  eval: true\n---\n\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Undoing, exporing and cleaning with git\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 7\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Fixing your commit messages\n\nLast week most of us got stuck in `Vi` mode\n\nTo fix this, run the following:\n\n#### Windows\n```bash\ngit config --global core.editor notepad\n```\n\n#### MacOS\n```bash\ngit config --global core.editor \"open -e -W -n\"\n```\n\nThis will set either notepad or TextEdit to be your commit editor (much nicer).\n\nOn Mac, note you must **quit** (not just close the window) for the commit message to be complete.\n\n## üß† Today‚Äôs Goals\n\n-   Learn how to safely undo and explore commits\n-   Understand how to recover lost work\n-   Get more comfortable with the Git timeline and history\n-   Clean up messy projects\n\n------------------------------------------------------------------------\n\n## üß† Git Mental Model\n\nGit works across three layers:\n\n-   **Working Directory**: your actual files\n-   **Index (Staging Area)**: what will be in your next commit\n-   **HEAD (Repository)**: your last committed snapshot\n\nSome examples: - `git add` moves changes ‚Üí index - `git commit` moves index ‚Üí HEAD - `git reset` moves HEAD pointer (soft/mixed/hard)\n\n------------------------------------------------------------------------\n\n## üîÅ Reverting and Resetting ‚Äì Recap\n\n### `git revert`\n\n-   Creates a **new commit** that undoes a previous one\n-   Safe on shared branches (e.g. `main`)\n\n``` bash\ngit revert <commit-hash>\n```\n\n------------------------------------------------------------------------\n\n### `git reset`\n\n-   **Moves your branch pointer backward**\n-   Can **rewrite history** (dangerous on shared branches!)\n-   Options:\n    -   `--soft`: Keep changes staged\n    -   `--mixed`: Keep changes unstaged\n    -   `--hard`: **Deletes changes**\n\n``` bash\ngit reset --soft HEAD~1\n```\n\n------------------------------------------------------------------------\n\n## üßµ Detached HEAD\n\n-   Happens when you check out a **specific commit**, not a branch\n-   Useful for exploring history\n-   If you make changes in this state, they can be lost unless you make a branch\n\n------------------------------------------------------------------------\n\n## üß™ Demo: Detached HEAD + Branch\n\n1.  In the terminal or Git pane:\n\n``` bash\ngit log --oneline\n```\n\n2.  Copy a commit hash from earlier and run:\n\n``` bash\ngit checkout <commit-hash>\n```\n\nYou‚Äôre now in **detached HEAD**!\n\n------------------------------------------------------------------------\n\n### üõü Rescue Your Work\n\nIf you want to keep changes made in detached HEAD:\n\n``` bash\ngit switch -c recovered-work\n```\n\n‚úÖ This creates a new branch from that point!\n\n------------------------------------------------------------------------\n\n## ‚úçÔ∏è `git commit --amend`\n\nUse this when you:\n\n-   Made a typo in the last commit message\n-   Forgot to include a file\n-   Want to slightly edit the last commit\n\n------------------------------------------------------------------------\n\n## üß™ Demo: Amending a Commit\n\n1.  Make a small commit\\\n2.  Realize you forgot something\\\n3.  Stage the missing file, then run:\n\n``` bash\ngit commit --amend\n```\n\nüéØ You can edit the message or leave it the same\n\n‚ö†Ô∏è Avoid `--amend` if you‚Äôve already pushed the commit\n\n------------------------------------------------------------------------\n\n## üîç `git reflog`\n\n-   Shows **every move of HEAD** (including things Git log forgets)\n-   Useful to **recover commits** after a reset or checkout\n\n``` bash\ngit reflog\n```\n\n------------------------------------------------------------------------\n\n### üß™ Activity: Oops, I reset too far!\n\n1.  Make a commit\\\n2.  Reset to a previous state:\n\n``` bash\ngit reset --hard HEAD~1\n```\n\n3.  Run `git reflog` to find the lost commit\\\n4.  Use:\n\n``` bash\ngit checkout <hash>\n```\n\nThen:\n\n``` bash\ngit switch -c recovered-branch\n```\n\nüéâ You‚Äôve recovered ‚Äúlost‚Äù work!\n\n------------------------------------------------------------------------\n\n## üóëÔ∏è `git rm`: Remove Files from the Repository\n\n-   Use `git rm` to delete a **tracked** file from both your working directory and Git‚Äôs index.\n-   Git will stage the deletion automatically.\n\n``` bash\ngit rm filename.txt\ngit commit -m \"Remove filename.txt\"\n```\n\n‚úÖ After this commit, the file will no longer exist in your working directory *or* the repository.\n\n------------------------------------------------------------------------\n\n## ‚ùó Why Not Just Delete the File?\n\n-   If you delete a file in RStudio or your file browser:\n    -   Git will show it as **\"deleted: filename.txt\"**\n    -   But you still need to `git add` the deletion\n\n``` bash\n# After deleting manually:\ngit status         # Shows deletion\ngit add filename.txt\ngit commit -m \"Remove file\"\n```\n\n‚úÖ `git rm` does both steps at once ‚Äî it‚Äôs safer and cleaner\n\n------------------------------------------------------------------------\n\n## üí° Recovering a Deleted File\n\nIf you **haven‚Äôt committed** the deletion yet:\n\n``` bash\ngit restore filename.txt\n```\n\nIf you **already committed** the deletion:\n\n``` bash\ngit checkout HEAD~1 -- filename.txt\n```\n\n‚úÖ Or use `git reflog` to find the commit where the file still existed\n\n------------------------------------------------------------------------\n\n## üßæ `git rm --cached`: Keep the File, Remove It from Git\n\n-   Use this when you've **added a file to Git by mistake**, but you don‚Äôt want to delete it from your computer\n-   Git stops tracking it ‚Äî but the file stays in your working directory\n\n``` bash\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data.csv\"\n```\n\n‚úÖ The file will still be on disk, but not in the next commit\n\n------------------------------------------------------------------------\n\n## üß† Common Use Case\n\n> You committed a large data file by accident\n\n1.  Add the filename to `.gitignore`\n2.  Run:\n\n``` bash\ngit rm --cached data.csv\ngit commit -m \"Remove data.csv from tracking\"\n```\n\n3.  Push your changes\\\n4.  The file is now ignored and won‚Äôt be re-added\n\n‚úÖ Useful for cleaning up mistakes without losing the file\n\n------------------------------------------------------------------------\n\n## üßπ `git clean`\n\n-   Deletes **untracked files** (not in Git yet)\n-   Helpful when switching branches or cleaning clutter\n\n``` bash\ngit clean -n   # dry run\ngit clean -f   # permanently delete\n```\n\n------------------------------------------------------------------------\n\n## ‚ö†Ô∏è Warning\n\n-   `git clean` is **permanent**\n-   You can‚Äôt undo it with `reflog` or reset\n-   Always use `-n` first to preview\n\n------------------------------------------------------------------------\n\n## üß™ Activity: Cleaning Up\n\n1.  In RStudio, create a few new files **but don‚Äôt add them to Git**\n2.  Run:\n\n``` bash\ngit status\ngit clean -n\n```\n\n3.  If it looks right:\n\n``` bash\ngit clean -f\n```\n\n‚úÖ Now those untracked files are gone!\n\n------------------------------------------------------------------------\n\n## üß† When to Use What\n\n| Situation                       | Use This             |\n|---------------------------------|----------------------|\n| Undo safely on shared branches  | `git revert`         |\n| Clean up your last commit       | `git commit --amend` |\n| Rewind local commit history     | `git reset`          |\n| Accidentally reset or lost work | `git reflog`         |\n| Delete untracked junk           | `git clean`          |\n\n------------------------------------------------------------------------\n\n## Questions?\n\n-   When would you **not** use `reset`?\n-   What does `reflog` help you find that `log` doesn‚Äôt?\n-   Have you ever thought you lost work but actually didn‚Äôt?\n\n------------------------------------------------------------------------\n\n\n## üç• What Is Squashing?\n\n**Squashing** means combining multiple commits into a single one.\n\nIt‚Äôs useful for:\n\n- Cleaning up messy history\n- Preparing code before pushing or merging\n- Grouping small fixes into one meaningful commit\n\n> Squashing doesn't change your code ‚Äî just your history!\n\n---\n\n## üß† How Squash Works\n\nBefore squashing:\n\n```text\nA -- B -- C -- D  (main)\n         ‚Üë\n       Fix typo\n```\n\nIf B, C, and D are all part of one logical change, we can squash:\n\n```text\nA -- [B+C+D]  (main)\n```\n\n‚úÖ One clean commit ‚Äî easier to read, review, and share.\n\n---\n\n## üõ†Ô∏è How to Squash Commits\n\nUse **interactive rebase** to squash:\n\n```bash\ngit rebase -i HEAD~3\n```\n\nYou'll see:\n\n```text\npick abc123 Add feature\npick def456 Fix typo\npick ghi789 Update docs\n```\n\nChange to:\n\n```text\npick abc123 Add feature\nsquash def456\nsquash ghi789\n```\n\nThen save + edit the commit message.\n\n---\n\n## ‚ö†Ô∏è When (and When Not) to Squash\n\n‚úÖ Good times to squash:\n\n- Before pushing a feature branch\n- To combine tiny commits (\"fix typo\", \"rename var\", \"oops\")\n\n‚ùå Avoid squashing:\n\n- After you‚Äôve pushed to a shared branch (rewrites history!)\n\n---\n\n\n# LaTeX\n\n![](images/LaTeX.png){fig-align=\"center\"}\n\n[LaTeX more info](https://www.LaTeX-project.org/)\n\n# LaTeX template\n\n![](images/LaTeX_template.png){fig-align=\"center\"}\n\n## LaTeX template\n\n```latex\n\n\\begin{document}\n% Packages to be used\n\\usepackage{amsmath} % <1>\n\n% Creating title % <2>\n\\title{This is an example}\n\\author{ETC5513, Monash University}\n```\n1. List all the packages\n2. % = comments\n\n## LaTeX template\n\n```latex\n\n\\begin{document} % <1>\n\\maketitle\n\n\\section{Introduction} % <2>\n\n% Introduction content\n\n\\end{document} % <3>\n\n```\n1. Open the document\n2. Sections each get a 'section' header\n3. Close the document at the end.\n\n\n## We are going to use LaTeX via Quarto files\n\nIn order to be able to use LaTeX within our Quarto documents, we need to install `tinytex`:\n\n```bash\nquarto install tinytex\n```\n\nor\n\n```bash\nquarto install tinytex --update-path\n```\n\nYou don't need the full LaTex installation for this unit, just this package.\n\n::: {.aside}\n[More info about tinytex here](https://yihui.org/tinytex/)\n:::\n\n## Integrate a LaTeX template into a quarto file\n\nThere are different ways:\n\n- If the file features are not too complicated. We can simply add some of the necessary LaTeX packages into our YAML preamble. You will be working with this example in the tutorial:\n\n```\ntitle: \"Reproducible and Collaborative Practices\"\nsubtitle: \"Tutorial 7\"\nauthor: \"Your Name\"\ninstitute: \"Department of Econometrics and Business Statistics\"\noutput: \n pdf:\n   toc: true\n   toc_depth: 2\n   number_sections: true\n   highlight: tango\nheader-includes: \n  - \\usepackage{titling}\n  - \\pretitle{\\begin{center} \\includegraphics[width=5in,height=13in]{figs/front.jpg}\\LARGE\\\\}\n  - \\posttitle{\\end{center}}\n  - \\usepackage{fontawesome}\n  - \\usepackage[most]{tcolorbox}\n  - \\usepackage{xcolor}\n  - \\usepackage{sectsty}\n  - \\sectionfont{\\color{olive}}\n  - \\usepackage{verbatim}\n```\n\n\n## Integrate a LaTeX template into a quarto file\n\nThere are different ways:\n\n- Another possibility is to use a [`preamble.tex`]{.monash-green2}\n- And incorporate that into our Quarto file (we will look into this in Week 8):\n\n![](images/preamble.png){fig-align=\"center\"}\n\n\n## Reference\n\n[LaTeX in 24 Hours A Practical Guide for Scientific Writing](\nhttps://monash.hosted.exlibrisgroup.com/primo-explore/fulldisplay?docid=catau51422921060001751&context=L&vid=MONUI&lang=en_US&search_scope=au_everything&adaptor=Local%20Search%20Engine&tab=default_tab&query=any,contains,LaTeX%20in%2024%20Hours%20%20A%20Practical%20Guide%20for%20Scientific%20Writing&mode=basic)\n\n![](images/book.png){fig-align=\"center\"}\n\n## Quarto PDF themes\n\nAnother way to include styling is to use a Quarto PDF extension. For example:\n\n* [Quarto Monash](https://github.com/quarto-monash)\n* [Quarto Letter](https://github.com/produnis/quarto-letter)\n* [Fancy Header](https://github.com/DamonCharlesRoberts/fancy-doc)\n\n...and more [here](https://quarto.org/docs/extensions/listing-formats.html)\n\n## Quarto PDF themes\n\nThese themes have the advantage of having done a lot of the LateX formatting for you. Looking inside the Quarto Monash memo, we have:\n\n```\n\\pretitle{%\n$if(branding)$%\n\\begin{textblock}{4}(1.9,0.85)\\includegraphics[height=1.5cm]{monash2}\\end{textblock}%\n\\begin{textblock}{4}(17.25,0.8)\\includegraphics[height=1.5cm]{MBSPortrait}\\end{textblock}%\n\\begin{textblock}{6}(13,28)\\includegraphics[height=0.7cm]{AACSB}~~~\n        \\includegraphics[height=0.7cm]{EQUIS}~~~\n        \\includegraphics[height=0.7cm]{AMBA}\n\\end{textblock}\n```\n\nWhich is doing a lot of positioning of pictures for the template.\n\n## Week 6 Lesson\n\n::: {.callout-important}\n\n## Recap\n\n* Undoing mistakes with `amend`, `revert`, and `rm`\n* Cleaning repos\n* An introduction to latex\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}