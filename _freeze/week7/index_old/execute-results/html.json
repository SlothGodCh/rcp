{
  "hash": "c5019c4d52ab93a1485f5ef4864dbc0d",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Workflows for reproducible data analysis\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 7\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 7\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Workflows for reproducible data analysis\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 7\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n* Learn about `git rebase`\n* Learn about `git fetch` and `git merge`\n* Learn about staging and unstaging files\n* Learn how to undo some changes\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n\n- Start learning about LaTeX\n- LaTeX integration in qmd files\n- Deeper understand about commits and SHA1 numbers\n- Visualize commits\n- Compare commits\n- Moving back to different commits and create branches starting from past commits.\n- Stage and unstage files\n- Revert to a previous commits\n- Removing files using git\n- Changing branch names\n- Clone all the branches from a repository\n\n:::\n\n# LaTeX\n\n![](images/LaTeX.png){fig-align=\"center\"}\n\n[LaTeX more info](https://www.LaTeX-project.org/)\n\n# LaTeX template\n\n![](images/LaTeX_template.png){fig-align=\"center\"}\n\n## LaTeX template\n\n```latex\n\n\\begin{document}\n% Packages to be used\n\\usepackage{amsmath} % <1>\n\n% Creating title % <2>\n\\title{This is an example}\n\\author{ETC5513, Monash University}\n```\n1. List all the packages\n2. % = comments\n\n## LaTeX template\n\n```latex\n\n\\begin{document} % <1>\n\\maketitle\n\n\\section{Introduction} % <2>\n\n% Introduction content\n\n\\end{document} % <3>\n\n```\n1. Open the document\n2. Sections each get a 'section' header\n3. Close the document at the end.\n\n\n## We are going to use LaTeX via Quarto files\n\nIn order to be able to use LaTeX within our Quarto documents, we need to install `tinytex`:\n\n```bash\nquarto install tinytex\n```\n\nor\n\n```bash\nquarto install tinytex --update-path\n```\n\nYou don't need the full LaTex installation for this unit, just this package.\n\n::: {.aside}\n[More info about tinytex here](https://yihui.org/tinytex/)\n:::\n\n## Integrate a LaTeX template into a quarto file\n\nThere are different ways:\n- If the file features are not too complicated. We can simply add some of the necessary LaTeX packages into our YAML preamble. You will be working with this example in the tutorial:\n\n```\ntitle: \"Reproducible and Collaborative Practices\"\nsubtitle: \"Tutorial 7\"\nauthor: \"Your Name\"\ninstitute: \"Department of Econometrics and Business Statistics\"\noutput: \n pdf:\n   toc: true\n   toc_depth: 2\n   number_sections: true\n   highlight: tango\nheader-includes: \n  - \\usepackage{titling}\n  - \\pretitle{\\begin{center} \\includegraphics[width=5in,height=13in]{figs/front.jpg}\\LARGE\\\\}\n  - \\posttitle{\\end{center}}\n  - \\usepackage{fontawesome}\n  - \\usepackage[most]{tcolorbox}\n  - \\usepackage{xcolor}\n  - \\usepackage{sectsty}\n  - \\sectionfont{\\color{olive}}\n  - \\usepackage{verbatim}\n```\n\n\n## Integrate a LaTeX template into a quarto file\n\nThere are different ways:\n- Another possibility is to use a [`preamble.tex`]{.monash-green2}\n- And incorporate that into our Quarto file (we will look into this in Week 8):\n\n![](images/preamble.png){fig-align=\"center\"}\n\n\n## Reference\n\n[LaTeX in 24 Hours A Practical Guide for Scientific Writing](\nhttps://monash.hosted.exlibrisgroup.com/primo-explore/fulldisplay?docid=catau51422921060001751&context=L&vid=MONUI&lang=en_US&search_scope=au_everything&adaptor=Local%20Search%20Engine&tab=default_tab&query=any,contains,LaTeX%20in%2024%20Hours%20%20A%20Practical%20Guide%20for%20Scientific%20Writing&mode=basic)\n\n![](images/book.png){fig-align=\"center\"}\n\n## Closer look at our repos\n\n![](images/mael-balland-V5hAryReZzo-unsplash.jpg){fig-align=\"center\"}\n\n## Commits, hash values and SHA numbers\n\n`git log` allows us to go back into our project history and see all the commits done in a repo. We can also see the commits of other contributors, we can browse the history to find out past issues or problems.\n\n```\ncommit 8cfaee1e447d8e83d745b51ffcd310465afb76b1\nAuthor: Patricia Menendez <patricia.menendez@monash.edu>\nDate:   Sat Apr 4 15:49:54 2023 +1000\n   \n    Uploading Week4 slides\n```\n\n\n## Commits, hash values and SHA numbers\n\nThe [Hash]{.monash-green2} or [SHA-1]{.monash-green2} value (often called `refs`) is created when we generate a commit. They are a 40 character string stored in hexadecimal. They are _effectively_ unique identifiers for a commit.\n\nThere are so many different hashes that you can get away with just using the first few to identify your SHA.\n\n## Inspect the SHA numbers\n\nUsing your terminal you can inspect your commits and SHA numbers by typing `git log` in your command line interface:\n\n::: {.callout-tip}\n* To exit the screen **press q**\n* To go up in the history, **press u**\n* To go down in the history, **press d** or space.\n:::\n\n\n## Inspect the SHA numbers\n\nYou can also inspect them from GitHub\n\n![](images/sha.png){fig-align=\"center\"}\n\n## `git log`\n\n\n- `git log` is the Git command that allow us to explore the commits history in a Git repository.\n- `git log` lists the commits made in that repository in reverse chronological order. That is, the most recent commits show up first. \n- `git log` has a great variety of options that allow us to explore commits depending on our preference.\n\n## git log\n\n`git log --oneline` condenses each commit to a single line\n\n```\n3a5bc86 W3 cli updates\n4d1b022 W3 shell update\n```\n\n* `git log -n 3`: show last 3 commits\n* `git log --since=01-01-2020`: Show commits since...\n* `git log --until=01-01-2020`: Show commits until...\n* `git log --author=\"Michael Lydeamore\"`: Show commits by a single author.\n\n## git log and git show\n\n* `git log -p`: shows the difference in each commit. You can chain flags, so `git log -p -n 2` will limit to the most recent 2 commits\n* `git log index.qmd` will show you all commits on a particular file\n* `git log --oneline -p index.qmd`: Shows you all the changes done in the different commits to this file, and their changes\n* `git show` will show various information about the repo.\n\n## More options associated with git log\n\n* `git log --stat` to see some (abbreivated) stats, like which files were modified, how many files, and how many lines were added or removed\n* `git log --pretty=oneline` prints each commit on one line\n* `git log --pretty=format: \"%h -%an : %s\"`: Display each commit in one line and display how long ago it was\n* `git log --pretty=format:\"%h %s\" --graph`: Will also show the tree\n\nFor more info on `git log`, please look [here](https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History).\n\n**Remember that if you want to visualize the tree of the repository:  VSCode is a great tool for that.**\n\n## `git log` and `git diff`\n\n`git log` displays revisions, and `git diff` displays the difference between two revisions in the repo.\n\nIt also shows snippets of the text around the part of the file that  has changed so you know in which part of the file the changes are happening.\n\n`git diff --color-words` will display words that have changed in a different color.\n\n## Changes within the files in the staging area\n\n`git diff --staged`\n\n![](images/diff_staged.png){fig-align=\"center\"}\n\n## git diff options\n\n* `git diff commit1 commit2`: Compare changes between _any_ two commits\n* `git diff branch1 branch2`: Compare across branches (!)\n\n::: {.fragment}\n* `git diff master newbranch ./index.qmd`: Compare the file `index.qmd`, between the master and newbranch.\n:::\n\n::: {.fragment}\n* `git diff HEAD~2 HEAD --name-only`: Shows the files that have changed between the latest commit and the two before that.\n:::\n\n## Visiting past commits\n\n![](images/git_tree1.jpg){fig-align=\"center\"}\n\n## Let's explore a given commit\n\nIn order to look at the status of the files in a given commit, we can use `git checkout SHA` for example:\n\n```\ngit checkout 47ef21k\n```\n\nOnce you run this command you will get the\n\n[\"You are in a detached HEAD state\"]{.monash-green2}\n\n**Note:** You get to the detached HEAD state by checking a commit directly. Remember the HEAD is a pointer that keeps track of your location within the Git repo.\n\nIf we want to see all the commits here we need to use `git log --oneline --all`.\n\n## Detached HEAD repo view\n\n![](images/detachedhead.jpg){fig-align=\"center\"}\n\n## Detached HEAD\nDetached HEAD state gives you the power to check out any commit and explore the older state of a repository without having to create a local branch. In addition, it also allows you to change the repository.\n\n::: {.callout-warning}\nAny commits made in a detached HEAD state will be lost when you check out any branch.\n:::\n\n::: {.callout-tip .fragment}\n## Solution\n\nCreate a branch to keep your commits\n:::\n\n::: {.fragment}\nIf you want to leave the detached HEAD and return to another branch you can simply use `git checkout branchname`\n:::\n\n## Go back into the repository {.smaller}\n\n- `git checkout 8cfaee1e447d8e8`\n\nYou are in 'detached HEAD' state ([the changes made in this state do not belong to any branch!]{.monash-green2}). That allows you to explore the files that are at that particular location of the repo history.\n\n::: {.callout-tip}\nNo-one wants to be a detached HEAD state. Even `git` repos.\n:::\n\n\n* If you want to bring some files from the past history to your current head, it is best to do this on a new branch\n  * `git branch new_branch`\n  * `git checkout new_branch`\n  * or `git checkout -b new_branch`\n* Continue working on this branch, then merge\n\n## Detached HEAD repo view\n\n![](images/detachedhead.jpg){fig-align=\"center\"}\n\n## Git environment tree \n\n![](images/tree3.png){fig-align=\"center\"}\n\n## Stage and unstage files \n\n**Before you push changes into the remote repo:**\n\n* `git reset filename`: Unstage a single file\n* `git reset`: Unstage all staged files\n\n::: {.fragment}\n\nFor example: \n\n- `git add filename`\n- `git status`: filename is added to the staging area\n- `git reset filename`: filename will be removed from the staging area.\n\nIntuition: You can think of `git reset` as the opposite of `git add`.\n\n:::\n\n# Commits\n\n## Commits\n\n- Commits need to be clear and concise.\n- Commits need to be meaningful so that someone else can understand what you changed in a commit.\n- Commit early, commit often, but commit meaningfully\n\n::: {.fragment}\n`Updating file 1`: ❌ Not meaningful!\n\n`Adding gmax for computing maximum value`: ✅\n:::\n\n\n**Please watch this video minute 3:16 and consider this when creating your commits!  [video](https://www.youtube.com/watch?v=Hlp-9cdImSM)**\n\n## Edit/Amend most recent commit (using cli)\n\n**This only works for your most recent commit if it has not been pushed to the remote repo!**\n\n- Maybe you forgot to add a file or you commit the wrong file. Then you can amend your last commit. That also includes the commit message (if you need to change it).\n\n- You can amend the commit directly using the command line interface/console\n\n- If you need to add a new file then you can use `git add file` and then use:\n\n```\ngit commit --amend -m \"your updated commit message\"\n```\n\n# Edit/Amend previous commit (using VS code)\n\n**This only works for your most recent commit if it has not been pushed!**\n\n`git commit --amend` will open the VSCode editor. This is a convenient way to modify the _most recent_ commit.\n\nWorkflow:\n\n* Modify whatever files you need to change\n* `git commit --amend`\n* Close editor, and all should be fixed.\n\n![](images/editcommit.png){fig-align=\"center\"}\n\n## Amending commits\n\n[**Amending a commit that you've already pushed to a  remote repo is BAD practice and should be avoided**]{.red}\n\n- Amending commits which are already pushed to a remote are more difficult to apply and would require a force push for the rewrite.\n- Also it will require rebase.\n\n![](images/gitsnapshots.png){fig-align=\"center\"}\n\n\n## Reverting commits that have been pushed to a remote repo\n\n`git revert`: The git revert command can be considered an 'undo' type command, however, \nit is not a traditional undo operation. \n\nInstead of removing the commit from the project history, it figures out how to invert the changes introduced by the commit and appends a new commit with the resulting inverse content. This prevents Git from losing history, which is important for the integrity of your revision history and for reliable collaboration.\n\nYou can think of it as a \"rollback\": it points your local environment back to a previous commit. \nYour \"local environment,\" refers to your local repository, staging area, and working directory.\n\n## `git revert`: When commits have been pushed\n\n- This can be useful, if you need to fix a bug  in your code that was introduced by a single commit.\n\n- It will record a new commit with the changes introduced by reverting the last commit. If you don't want to include the commits reverted then you could use `git revert --no-commit`.\n\n- To revert the previous commit `git revert HEAD`\n\n\n## `git revert`: When commits have been pushed\n\n- Note that here we are **not using** `HEAD~1` as with reset.The reason is that when using the `git reset` command we are setting a new HEAD position while with `git revert` we are actually reverting the commit specified.\n\n- Then you will have to commit the changes again for the files to be reverted and for the commit to be undone.\n\n- When using the `git revert` command, Git will automatically open your text editor (VS code) in order to commit the changes.\n\n## Removing files\n\n\n- If the files are untracked you can just remove them\n- If the files are tracked. You can use git to remove the files\n  - `git rm` file.txt\n  - `git status` (file already added into the staging area)\n  - `git commit -m` \"Delete file.txt\"\n  - `git push origin` master\n\n## Mirroring a repository\n\nMirroring is to replicate the state of a remote or upstream repository in our local machine. By state, we mean all the branches and all the tags as well.\n\n```\n--mirror: \n  Set up a mirror of the source repository. This implies --bare. Compared to --bare,\n    --mirror not only maps local branches of the source to local branches of the target,\n    it maps all refs (including remote-tracking branches, notes etc.) and sets up a\n    refspec configuration such that all these refs are overwritten by a git remote\n    update in the target repository.\n```\n\n## Example of git mirror\n\n- `mkdir Example`   (Don't forget to create a folder)\n- `cd Example` (And navigate into that folder before the next steps!)\n- `git clone --mirror https://github.com/ETC5513/GitKraken-example.git .git`\n- `git config --unset core.bare`\n- `git reset --hard`      \n\n# Commits\n\n- So far we are only writing the commit subject line.\n- Concise and informative \n- Be descriptive and specific about what changed.\n- Next week we will learn to add more info into the commits (commit body).\n- Active tense and make sure they are informative so that if you need to find something in your history you can do that!\n\n## Week 7 Lesson\n\n::: {.callout-important}\n- Start learning about Latex\n- Latex integration in Rmd files\n- Deeper understand about commits and SHA1 numbers\n- Visualize commits\n- Compare commits\n- Moving back to different commits and create branches starting from past commits.\n- Stage and unstage files\n- Revert to a previous commits\n- Removing files using git\n- Clone all the branches from a repository\n:::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}