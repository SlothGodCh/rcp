{
  "hash": "7aebec0840c81c12a2afb795f642d1c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Workshop 7\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html: \n        embed-resources: true\n        output-file: \"index.html\"\n        toc: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n# üîß Workshop Goals\n\nBy the end of this workshop, you‚Äôll be able to:\n\n- Undo commits safely (`revert`, `reset`)\n- Work with old commits using detached HEAD\n- Recover lost commits using `reflog`\n- Modify your last commit with `--amend`\n- Clean up tracked and untracked files (`git rm`, `git clean`)\n\n---\n\n# üöß Setup\n\n1. Go to [https://github.com](https://github.com) and create a new repository.  \n   Name it something like `git-fix-workshop`.  \n   ‚úÖ Check **Add a README file**\n\n2. Click the green **Code** button and copy the **SSH** URL.\n\n3. In RStudio, open a new **RStudio Project**:\n   - Go to **File ‚Üí New Project ‚Üí Version Control ‚Üí Git**\n   - Paste in the SSH URL\n   - Choose a location and click **Create Project**\n\n4. Open the **Terminal** tab in RStudio (or use the Git pane).  \n   You now have a GitHub-connected repo ready to go.\n\n\n3. Create a new file called `model.R`. Add a few lines of R code that load a library, and draw a plot.\n\n---\n\n# 1Ô∏è‚É£ Revert vs Reset\n\n## Step 1: Make Three Commits\n\nAdd one line at a time and commit after each:\n\n```\nLine 1\nLine 2\nLine 3\n```\n\nYou should now have 3 commits. Check with:\n\n```bash\ngit log --oneline\n```\n\n---\n\n## Step 2: Revert the Most Recent Commit\n\nLet‚Äôs safely undo the last thing you committed ‚Äî no risk of conflicts here.\n\nRun:\n\n```bash\ngit log --oneline\n```\n\nThe most recent commit should be the one that added Line 3.\n\nNow run:\n\n```bash\ngit revert HEAD\n```\n\n‚úÖ Git will create a new commit that undoes the last one (removing Line 3).\n\nCheck your file and run:\n\n```bash\ngit log --oneline\n```\n\nYou should see a new commit at the top with a message like:  \n`Revert \"Add line 3\"`\n\nThat‚Äôs how you safely undo a recent commit using `revert`.\n\n---\n\n## Step 3: Reset the Last Commit\n\nRun:\n\n```bash\ngit reset --soft HEAD~1\n```\n\nNow run:\n\n```bash\ngit status\n```\n\nWhat do you see? Try committing again if you want.\n\n---\n\n# 2Ô∏è‚É£ Detached HEAD and Rescue\n\n## Step 1: Checkout an Old Commit\n\nFrom your log, copy the hash for the first commit.\n\n```bash\ngit checkout <commit-hash>\n```\n\nYou're now in a **detached HEAD** state.\n\nTry editing `model.R` and committing:\n\n```bash\ngit add model.R\ngit commit -m \"Edit in detached HEAD\"\n```\n\n---\n\n## Step 2: Create a Branch to Save Your Work\n\n```bash\ngit switch -c experiment\n```\n\nYou're now safe! Run `git log` and note the history.\n\n---\n\n# 3Ô∏è‚É£ Amend the Last Commit\n\n1. Make a new commit.\n2. Realize you forgot to add a second file.\n3. Create and add another file (e.g., `forgotten.txt`)\n4. Run:\n\n```bash\ngit add forgotten.txt\ngit commit --amend\n```\n\nDid the commit message or hash change?\n\n---\n\n# 4Ô∏è‚É£ Reflog to the Rescue\n\n## Step 1: Make and Reset a Commit\n\n1. Make a quick commit (e.g., change `notes.txt`)\n2. Run:\n\n```bash\ngit reset --hard HEAD~1\n```\n\nThe commit is now gone... or is it?\n\n---\n\n## Step 2: Use `reflog`\n\n```bash\ngit reflog\n```\n\nFind the lost commit hash and restore it:\n\n```bash\ngit checkout <hash>\ngit switch -c recovered-work\n```\n\n‚úÖ Your work is back!\n\n---\n\n# 5Ô∏è‚É£ Cleaning and Removing\n\n## Step 1: Track and Remove a File\n\n1. Create a file (e.g., `temp.txt`)\n2. Add and commit it\n3. Now remove it using:\n\n```bash\ngit rm temp.txt\ngit commit -m \"Remove temp file\"\n```\n\nCheck `git log` ‚Äî what happened?\n\n---\n\n## Step 2: Remove a File but Keep It Locally\n\n1. Create and commit another file (e.g., `data.csv`)\n2. Run:\n\n```bash\ngit rm --cached data.csv\ngit commit -m \"Stop tracking data\"\n```\n\n3. The file still exists in your project, but is no longer tracked.\n\n---\n\n## Step 3: Clean Untracked Files\n\n1. Create a few files but **don‚Äôt add them to Git**.\n2. Preview what would be deleted:\n\n```bash\ngit clean -n\n```\n\n3. If you‚Äôre sure:\n\n```bash\ngit clean -f\n```\n\n‚úÖ These files are now gone ‚Äî permanently.\n\n---\n\n# ‚úÖ Summary Questions\n\n- When would you use `revert` instead of `reset`?\n- What does `reflog` help you recover?\n- What‚Äôs the difference between `git rm` and `git clean`?\n- How would you safely stop tracking a file that‚Äôs already in the repo?\n\n---\n\nüéâ Great work! You‚Äôve now practiced some of Git‚Äôs most powerful (and dangerous!) commands ‚Äî safely.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}