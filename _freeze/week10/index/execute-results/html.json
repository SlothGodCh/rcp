{
  "hash": "4083fd7921247c2021a9748ab2132c80",
  "result": {
    "engine": "knitr",
    "markdown": "---\npagetitle: \"ETC5513: Reproducible and Collaborative Practices\"\nsubtitle: \"Keeping environments separate and reproducible\"\nauthor: \"Michael Lydeamore\"\nemail: \"michael.lydeamore@monash.edu\"\ndate: \"Week 10\"\ndepartment: \"Department of Econometrics and Business Statistics\"\nunit-url: \"rcp.numbat.space\"\nfooter: \"ETC5513 Week 10\"\nformat: \n  revealjs:\n    logo: images/monash-stacked-blue-rgb-transparent.png\n    slide-number: c\n    multiplex: false\n    theme: ../assets/monash.scss\n    show-slide-number: all\n    show-notes: false\n    controls: true\n    width: 1280\n    height: 750\n    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]\n    include-after-body: \"../assets/after-body.html\"\n    chalkboard:\n      boardmarker-width: 5\n      buttons: true\nexecute:\n  echo: true\n---\n\n\n\n\n\n\n## <br>[ETC5513: Reproducible and Collaborative Practices]{.monash-blue .title} {#etc5513-title background-image=\"images/bg-01.png\"}\n\n### Keeping environments separate and reproducible\n\nLecturer: *Michael Lydeamore*\n\nDepartment of Econometrics and Business Statistics\n\n::: tl\n<br>\n\n<ul class=\"fa-ul\">\n\n<li>\n\n[<i class=\"fas fa-envelope\"></i>]{.fa-li}michael.lydeamore@monash.edu\n\n</li>\n\n<li>\n\n[<i class=\"fas fa-calendar-alt\"></i>]{.fa-li} Week 10\n\n</li>\n\n<li>\n\n[<i class=\"fa-solid fa-globe\"></i>]{.fa-li}<a href=\"rcp.numbat.space\">rcp.numbat.space</a>\n\n</li>\n\n</ul>\n\n<br>\n:::\n\n## Open Frame\n\n![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align=\"center\"}\n\n## Recap\n\n* Learn how to add references and bibliography\n* Dealing with large files\n* Tags\n* GitHub issues\n\n## Today's plan {#aim}\n\n::: {.callout-important}\n\n## Aim\n\n* Create a `git` project from an existing local folder\n* Licensing a repository\n* Lightweight dependency management\n* Advanced collaborative practices\n* Templates for slides\n\n:::\n\n## Adding version control onto an existing project\n\nSuppose you have a folder on your computer which is not version controlled, and you decide that you would like to start tracking it.\n\nYou go to GitHub and create a repo over there. You now have two options:\n\n::: {.columns}\n::: {.column width='50%'}\n::: {.fragment}\n\n#### Approach 1:\n\n* Create a GitHub repo\n* Clone the repo locally\n* Move all the files and folders from your existing project into this folder\n* Stage, commit, push\n\n:::\n:::\n::: {.column width='50%'}\n::: {.fragment}\n#### Approach 2:\n\n* Open a terminal in the directory for your folder\n* `git init` to create a `git` repostiroy\n* Stage, commit\n* `git remote add origin git@github.com:...`\n* `git push -u origin main`\n:::\n\n:::\n:::\n\n## Adding version control onto an existing project\n\nOption 2 is preferred because it [reduces duplication]{.monash-green2}.\n\nGitHub even gives you instructions:\n\n![](images/init.png){fig-align=\"center\"}\n\n::: {.fragment}\nThe `-u` flag says to link remote `origin` to branch `main`. it is a one time operation.\n:::\n\n::: {.fragment}\nRemember you can verify your remotes using `git remote -v`\n:::\n\n# Demo\n\n## Repository Visibility\n\n![](images/reposvisibility.png){fig-align=\"center\"}\n\n[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility)\n\n## Licensing\n\nPublic repos in GitHub make your work publicly available and therefore it is important to establish how your work should be acknowledged if someone else wants to use it.\n\n> Public repositories on GitHub are often used to share open source software. For your repository to be truly open source, you'll need to license it sot that others are free to use, change and distribute the software.\n\n[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository)\n\n## Available licenses in GitHub\n\n![](images/githubli.png){fig-align=\"center\"}\n\n[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#detecting-a-license)\n\n## Choosing a license\n\n![](images/chooselicense.png){fig-align=\"center\"}\n\n[Source here](https://choosealicense.com/)\n\n## License examples\n\n::: {.columns}\n::: {.column width='50%'}\n![](images/ggplotlog.png){fig-align=\"center\"}\n\n:::\n::: {.column width='50%'}\n![](images/forecastlogo.png){fig-align=\"center\"}\n\n:::\n:::\n\n## No license\n\n![](images/no-permission.png){fig-align=\"center\"}\n\n[Source here](https://choosealicense.com/)\n\n## Creative Commons License\n\n![](images/cclicenses.png){fig-align=\"center\"}\n\n## Creative Commons License\n\n![](images/ccl.png){fig-align=\"center\"}\n\n[More info here](https://en.wikipedia.org/wiki/Creative_Commons_license)\n\n## Location of your license\n\nYou can add a license from:\n\n* GitHub when you first create a repo\n* Later by placing your license text in a file named [LICENSE.md]{.monash-green2}\n\n::: {.fragment}\nLicenses go in the _root_ of the directory. Some information about licenses is sometimes included in `README.md` as well, but this is not required.\n\n[More info here](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository#detecting-a-license)\n:::\n\n# Demo\n\n# Making sure your code is transportable\n\nIt used to work I'm sure!\n\n## Think about the following issue\n\n* My code ran 6 months ago ([I'm sure it did]{.monash-blue}) and now it is not working.\n* My figures in `ggplot` look funny now\n\n::: {.fragment}\nGenerally, this is because a version of a package has updated.\n:::\n\n## Package environments\n\n![](https://imgs.xkcd.com/comics/python_environment.png){fig-align=\"center\"}\n\n## Lightweight dependency management\n\nThe primary solution for dependency management (which is far from perfect) is `renv`\n\n![](images/renvlogo.png){fig-align=\"center\"}\n\nThe idea is to create a [project-specific]{.monash-green2} library to ensure a project has a record of which version of R packages are used.\n\n## How does `renv` work?\n\n* Gives each R project it's own local library\n* Provides an easy way to get R sessions to _use_ a local library\n* Provides tools for managing the R packages installed in these local libraries\n\n![](images/renvlogo.png){fig-align=\"center\"}\n\n## So what is a library path anyway?\n\nWhen we load a library, what exactly is going on?\n\n::: {.fragment}\nR searches in a collection of places for the `dplyr` package, and loads it.\n\nThese places are called _library paths_.\n:::\n\n::: {.fragment}\nYou can change the library path, and you can view them using `.libPaths()`\n:::\n\n## Library paths example\n\nYour default library path is probably something like:\n\n```\n/Library/Frameworks/R.framework/Versions/4.0/Resources/library\n```\n\nIf you want to find a package, you can use `find.package(\"dplyr\")`\n\n::: {.fragment}\n`renv` sets up a project-specific library path to keep your packages from interacting with eaach other.\n:::\n\n## `renv` workflow\n\nVia the R console:\n\n* `renv::init()` to initialise the project\n* Work as usual, installing packages, writing code\n* `renv::snapshot()` to save the state of the local library to a lockfile\n* `renv::restore()` to reverty our packages to the state encoded in the lockfile\n\nThe [lockfile]{.monash-blue} contains all the information about which package version is being used, and makes your environment _reproducible_.\n\n## But why?\n\nIn collaborative projects, [you may want to ensure everyone is working with the same environment]{.monash-green2}\n\nIt helps protect against changes between different versions of packages.\n\n::: {.fragment}\nBy sharing the lockfile, your collaborators will be using the same version of packages that you are using, without breaking their own installs.\n:::\n\n# Demo\n\nObserve the changes in `libPaths`, the new files, and the lockfile.\n\n## Managing the lockfile\n\n\"If you're using a version control system with your project, then as you call `renv::snapshot()` and later commit new lockfiles to your repository, you may find it necessary later to recover older versions of your lockfiles. renv provides the functions `renv::history()` to list previous revisions of your lockfile, and `renv::revert()` to recover these older lockfiles.\"\n\nCurrently, only Git repositories are supported by `renv::history()` and `renv::revert()`.\n\n[Source here](https://rstudio.github.io/renv/articles/renv.html)\n\n\n## Managing the lockfile\n\nEach project contains only a single `renv.lock`\n\nThere are some helper functions:\n\n* `renv::history()`: find prior commtis in which the lockfile has changed\n* `renv::revert(commit = SHA1)`: Revert the lockfile to a state at a previous commit\n\n::: {.callout-important}\nMake sure to commit the lockfile often, and call `renv::snapshot()` when you're updating packages! This is the only way the changes can be recorded and shared.\n:::\n\n## Workflow for collaboration\n\n* Select a version control system (i.e. git and GitHub)\n* Initialise the project: `renv::init()`\n* Periodically, and after adding new packages, use `renv::snapshot()`\n* Stage, commit and share `renv.lock`  with others via version control.\n\n## Workflow for collaboration\n\nOnce collaborators clone the repository, they also run `renv::init()`.\n\nThis will automatically install the packages declared in the lockfile.\n\nBy doing this, they can work in your project using exactly the same R packages that you used when the lockfile was generated.\n\n# Demo\n\n# Reproducible Presentations Demo\n\n# Collaborative project tips {.smaller}\n\n- Listen and learn.\n- Care about the statistical/data science methods. Know what you are doing so that you can explain it!\n- Establish protocols for your work to be reproducible and acknowledged.\n- Remember the data has an owner and it needs to be acknowledge and referenced.\n- Be careful with changes in data structure! Request that any updates to the data preserves the data structure.\n- Don't feel pressure to do an analysis that you feel is not right.\n- Learn to disagree if you consider that the data treatment/statistical or computational methods are not adequate.\n- Learn what the methods are - not just how to use software functions. That will take you far!!\n\n[Interesting paper here](https://ro.uow.edu.au/cgi/viewcontent.cgi?referer=https://www.google.com/&httpsredir=1&article=1022&context=asearc)\n\n\n## Week 10 Lesson\n\n::: {.callout-important}\n* Learn how to add references and bibliography\n* Dealing with large files\n* Tags\n* GitHub issues\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}