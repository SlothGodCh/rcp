{
  "hash": "fe69c432c5ce939e206210c8124a86f1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'ETC5513: Collaborative and Reproducible Practices'\nsubtitle: \"Tutorial 10\"\nauthor: \"Michael Lydeamore\"\ndate: today\nformat:\n    unilur-html:\n        output-file: index.html\n        embed-resources: true\n    unilur-html+solution:\n        output-file: solution.html\n        embed-resources: true\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n## ðŸŽ¯ Objectives\n\n* Learn to use `git lfs` to deal with large files\n* Create licenses in our repostiroies\n* Use `renv` to create a local library\n\n## Setting up licensed repositories\n\nFor this week's tutorial, you'll need a brand new repository to work in. It can be public or private.\n\n1. Create a new repository with your choice of name. Ensure that it has a **license**, a **`.gitignore`** file and a **`README`** file.  \nYou should select these from the repo creation menu, not by committing them yourself later.\n\n2. Clone the repository to your local machine\n\n3. Change the license file to a different one. Remember you can find licenses on [choosealicense.com](https://www.choosealicense.com). Stage, commit and push your changes.\n\n4. _Revert_ the commit you just made.\n\n::: {.unilur-solution}\n`git revert HEAD~0`\n\nYou don't need the `HEAD~0` to revert the most recent commit.\n:::\n\n5. _Reset_ the last two commits. You should end up with your original license file back on the repo.\n\n::: {.unilur-solution}\n`git reset HEAD~2`\n:::\n\n6. Commit, stage and push your changes (if there are any). What do you notice?\n\n::: {.unilur-solution}\nAny evidence of the license change has been removed from the repository. This is known as a _destructive_ operation.\n:::\n\n7. Edit the `README.md` file to include your name. Stage and commit (but don't push).\n\n8. _Amend_ the most recent commit to also include the course code and the tutorial number. Include an _expanded_ commit message for the amended commit.\n\n::: {.unilur-solution}\n`git commit --amend` should open your text editor.\n\nTo include an expanded commit message, leave a blank line between the summary and expanded text.\n:::\n\n9. Push your changes. Can you see the expanded commit message on GitHub?\n\n## Lightweight dependency management using `renv`\n\nInside your repo from the previous section:\n\n1. Create a qmd file that has a libraries code chunk, and load the `dplyr` and `ggplot2` libraries.\n\n2. Stage the changes, commit and push.\n\n3. What are the library paths for this project?\n\n::: {.unilur-solution}\n```\n.libPaths()\n\"/Library/Frameworks/R.framework/Versions/4.0/Resources/library\"\n```\n:::\n\n4. Install the `renv` package\n\n5. Initialise `renv` in your R seession\n\n::: {.unilur-solution}\n`renv::init()`\n:::\n\n6. What new files or folders have been made in your repo with this command?\n\n::: {.unilur-solution}\nThere is a new folder called `renv`, a new file called `.Rprofile` and a new filed called `renv.lock`.\n:::\n\n7. Using the terminal, use `cd` and `ls` to find the new files.\n\n8. In the terminal, check the status of your repo.\n\n::: {.unilur-solution}\n![](../images/renv_init_files.png){fig-align=\"center\"}\n:::\n\n9. Create a snapshot of your repostiory using `renv::snapshot()`\n\n10. Check the status of your repo, stage, commit and push the changes into the remote repository.\n\n::: {.unilur-solution}\n```\ngit status\ngit add .\ngit commit -m \"Adding renv files for dependency management\"\ngit push origin main\n```\n:::\n\n**Extension:** Try adding a development package from GitHub, such as the [`naniar`](https://github.com/njtierney/naniar) package. Follow the `renv` workflow. Does the package get recorded? Can you see it in the lockfile? How is it recorded differently from packages on CRAN?\n\n\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}