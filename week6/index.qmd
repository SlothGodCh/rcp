---
pagetitle: "ETC5513: Reproducible and Collaborative Practices"
subtitle: "Reproducible reporting and version control systems"
author: "Michael Lydeamore"
email: "michael.lydeamore@monash.edu"
date: "Week 6"
department: "Department of Econometrics and Business Statistics"
unit-url: "rcp.numbat.space"
footer: "ETC5513 Week 6"
format: 
  revealjs:
    logo: images/monash-stacked-blue-rgb-transparent.png
    slide-number: c
    multiplex: false
    theme: ../assets/monash.scss
    show-slide-number: all
    show-notes: false
    controls: true
    width: 1280
    height: 750
    css: [../assets/tachyons-addon.css, ../assets/custom.css, ../assets/lecture-01.css]
    include-after-body: "../assets/after-body.html"
    chalkboard:
      boardmarker-width: 5
      buttons: true
execute:
  echo: true
---


```{r, include = FALSE}
current_file <- knitr::current_input()
basename <- gsub(".[Rq]md$", "", current_file)

knitr::opts_chunk$set(
  fig.path = sprintf("images/%s/", basename),
  fig.width = 6,
  fig.height = 4,
  fig.align = "center",
  out.width = "100%",
  fig.retina = 3,
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  cache = TRUE,
  cache.path = "cache/"
)
```

## <br>[`r rmarkdown::metadata$pagetitle`]{.monash-blue .title} {#etc5513-title background-image="images/bg-01.png"}

### `r rmarkdown::metadata$subtitle`

Lecturer: *`r rmarkdown::metadata$author`*

`r rmarkdown::metadata$department`

::: tl
<br>

<ul class="fa-ul">

<li>

[<i class="fas fa-envelope"></i>]{.fa-li}`r rmarkdown::metadata$email`

</li>

<li>

[<i class="fas fa-calendar-alt"></i>]{.fa-li} `r rmarkdown::metadata$date`

</li>

<li>

[<i class="fa-solid fa-globe"></i>]{.fa-li}<a href="`r rmarkdown::metadata[["unit-url"]]`">`r rmarkdown::metadata[["unit-url"]]`</a>

</li>

</ul>

<br>
:::

## Open Frame

![](images/kelly-sikkema-mdADGzyXCVE-unsplash.jpg){fig-align="center"}

## Recap

1. More Git/GitHub tools
2. Pull requests: a tool to collaborate with others via GitHub 
3. VSCode 

## Today's plan {#aim}

::: {.callout-important}

## Aim
* Learn about `git rebase`
* Learn about `git fetch` and `git merge`
* Learn about staging and unstaging files
* Learn how to undo some changes
:::

## Rebase

In git, there are two main ways to integrate changes from one branch into another:

1. `git merge`
2. `git rebase`

## Merging branches using `git merge`

If we use `git merge` to combine diverging branches, we will have a non-linear history.

::: {.columns}
::: {.column width='50%'}
![](images/mergingbranches1.png){fig-align="center"}

:::
::: {.column width='50%'}
![](images/mergingbranches2.png){fig-align="center"}

:::
:::

::: {.callout-note}
## Question

In which situation can we merge branches and have a _linear_ history?
:::

## Rebase

Rebasing is the process of moving or combining a sequence of commits from a branch onto another branch.

* Rebasing is most useful and easily visualised in the context of a feature branching workflow
* Rebasing changes the _base_ of your branch from one commit to another, making it appear as though you'd created your branch from a different commit.

::: {.callout-important}
Rebasing moves an entire branch to another location in the repository
:::

It can create a cleaner history if you don't want merge lines everywhere.

## Rebase in practice {.smaller}

Assume the following history exists and the current branch is `feature`:

```
          E<---F<---G feature
         /
    A<---B<---C<---D main
```    

If we want to rebase the commits in the `feature` branch into the main branch, we need to do the following:

::: {.columns}
::: {.column width='50%'}
* `git checkout feature` *and*
* `git rebase main`

or

* `git rebase main feature`
:::
::: {.column width='50%'}
```
        feature    E'<--F'<--G' 
                  /
 A<---B<---C<---D main
 ```
:::
:::

::: {.center .fragment}

which results in:

 ```
    A<---B<---C<---D<---E'<--F'<--G' main
 ```
:::

## Rebasing can be dangerous

![](images/rebase.png){fig-align="center"}

## Git rebase and merge

* Merging is a non-destructive operation. The existing branches are not changed in any way, and this avoids all the potential problems of rebasing.

* Rebasing moves the entire `feature` branch to begin on the tip of the main branch, incorporating all of the new commits into main.
* Rebasing rewrites the project history by creating brand new commits for each commit in the original branch, giving a cleaner history
* _However_, this creates problems with safety and traceability

::: {.callout-caution}
## Golden rule for `rebase`

Never use it on public branches (such as `main`) in collaborative projects.
:::

## More on branching

Imagine that you are working on your local repository and  a collaborator has created a new branch in your remote repo.
You are currently working on your local repo and want to have a look at the new branch. That means that the local repo and your remote repo have [diverged]{.monash-green2}. That is, both the local and remote repositories are **not currently synchronized.**


- To synchronize your work: `git fetch origin`
- `git fetch origin` looks where `origin` is and fetches any data from it that you don‚Äôt yet have.
- It also updates your local database repo, moving your origin/main pointer (HEAD) to its new, more up-to-date position. [However, it does not move the HEAD of your local repository]{.monash-green2}

## About remotes

Note: If a git repo contains more than one `remote`, then `git fetch` will fetch all the changes from **all** remotes.

To fetch only one, use `git fetch origin` (or whatever remote you are after).


# Why use fetch?

![](images/fetch1.png){fig-align="center"}

`origin/main` is the remote tracking branch, which provides information about where the main branch is in origin

## How does fetch work?
 
![](images/fetch2.png){fig-align="center"}

`git fetch` downloaded the new B commit however our local working directory is not updated, and the head of our main branch is still pointing to commit A.

## How do we merge those branches?

We need to combined main branch with the remote tracking origin/main branch. How?

::: {.fragment}
#### By merging! {.center}
:::

::: {.fragment}
First, we need to move in the `main` branch and then merge `origin/main`

```
git checkout main
git merge origin/main
```
:::

::: {.fragment}
If the branches have not diverged, we can merge without conflict via a 'fast merge'.

If the branches have diverged, we will need to resolve conflicts.

You can check the status of the local and remote branches by using `git branch -vv`
:::

## Very useful commands for fetching

- `git remote` lets you create, view, and delete connections to remote repositories.
- `git branch -vv` allows you to check the status of your local and remote branches in relation to each other.
- `git fetch` `origin` fetches the changes from remote origin
- `git branch -a` lists all the branches available in the local repository +  all the branches fetched from the remote. 

::: {.callout-tip}
The branches fetched from the remote origin would be preceded by remotes/origin/
:::

## Undoing an error

Not everything we do on a project will be worth keeping. We've seen already one way to undo some work (`git stash`). But, that relies on not having already committed the changes.

What if we've made a commit, and then realise we don't want that commit anymore?

::: {.fragment}
#### We can reset {.center}
:::

::: {.fragment}
#### Or revert {.center}
:::

## Undoing an error

First, we should discuss `checkout`. We've talked alot about `HEAD` - that's the current pointer of the repository.

We've seen `git checkout` before too: When swapping between branches!

Fundamentally, branches are just commits with a slightly different pointer. That means, we can `checkout` to a specific commit.

::: {.fragment}
One option to go backwards on the git tree and make a new set of changes is to `checkout` to a commit hash, make the new changes, and then push and manage the merge conflicts.
:::

## Undoing an error

Here's our git tree:

```
(a) --- (b) --- (c) --- (d) <- HEAD, main
```

::: {.fragment}

When we checkout `b`, our git tree changes to:

```
(a) --- (b) --- (c) --- (d) <- main
          \ 
          main
```
:::

::: {.fragment}
Note that doing this will create _diverging histories_ and so is generally to be avoided. You _can_ overwrite history using `git push -f`, but this is really discouraged.
:::

## Reset or Revert

There are two ways to change commit history of a repository: `reset` and `revert`.

::: {.callout-tip}
Generally, `reset` is for when the commit isn't public, and `revert` is when you've already made a public commit.
:::

::: {.fragment}
This is because `reset` changes the commit history, and `revert` does not.
:::


## üõë Two Very Different Tools

| Command      | What it does                          | Safe on shared branches? |
|--------------|---------------------------------------|---------------------------|
| `git revert` | Adds a new commit that undoes changes | ‚úÖ Yes                    |
| `git reset`  | Moves branch pointer (can erase commits) | ‚ùå Use with caution       |

---

## üîÅ `git revert`

- Safely **undoes a specific commit**
- Leaves history intact
- Perfect for undoing mistakes on **main** or shared branches

```bash
git revert <commit-hash>
```

---

## ‚úçÔ∏è `git revert` Example

You added a bad commit:

```bash
git log --oneline
```

Find the commit to undo, then:

```bash
git revert abc1234
```

‚úÖ Creates a **new commit** that reverses the changes

---

## üßπ `git reset`

- Rewrites history ‚ö†Ô∏è  
- Used to **go back in time**  
- 3 types: `--soft`, `--mixed`, `--hard`

```bash
git reset --hard HEAD~1
```

---

## üß™ Reset Variants

### `--soft`
- Undo commit, keep staged changes

```bash
git reset --soft HEAD~1
```

### `--mixed` (default)
- Undo commit, keep **unstaged** changes

```bash
git reset HEAD~1
```

### `--hard`
- ‚ö†Ô∏è DANGEROUS: Lose commits *and* file changes

```bash
git reset --hard HEAD~1
```

---


## üîç Visualizing [Revert]{style="color: green"} vs Reset

Original history:

```
A --- B --- C --- D   (main)
```

::: {.fragment}
You realize C introduced a bug...

```
git revert C:

A --- B --- C --- D --- E   ‚Üê E undoes the changes from C
```
:::

::: {.fragment}
History stays intact ‚úîÔ∏è
:::

## üîç Visualizing Revert vs [Reset]{style="color: green"}

Original history:

```
A --- B --- C --- D   (main)
```

::: {.fragment}
You realize C introduced a bug...

```
git reset --hard B:

A --- B   (main rewound ‚Äî commits C and D are gone!) ‚ö†Ô∏è
```

:::

::: {.fragment}
History is rewritten üö®
:::

## üß† When to Use Which?

| Situation                              | Use `revert` | Use `reset` |
|----------------------------------------|--------------|-------------|
| You're on `main` or working with others | ‚úÖ Yes       | ‚ùå No        |
| You need to undo a public commit        | ‚úÖ Yes       | ‚ùå No        |
| You're cleaning up your own history     | ‚ùå No        | ‚úÖ Yes       |
| You want to fix a commit but keep edits | ‚ùå No        | ‚úÖ (soft/mixed) |

---

## üí° Pro Tips

- Always check `git log` before undoing!
- Use `reset` only on branches you haven't shared
- Use `revert` when you need a safe undo that keeps history

## Week 6 Lesson

::: {.callout-important}

## Recap
* Learn about `git rebase`
* Learn about `git fetch` and `git merge`
* Learn about staging and unstaging files
* Learn how to undo some changes
:::





